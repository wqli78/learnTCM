{
  "name": "Object Oriented and Functional Programming",
  "order": 7,
  "time": "2 hours",
  "helpRoom": "HelpJavaScript",
  "note": [
    "Methods",
    "Closures",
    "Factories",
    "Pure Functions",
    "Currying Functions",
    "Functors",
    "Currying Functions"
  ],
  "challenges": [
    {
      "id": "cf1111c1c15feddfaeb1bdef",
      "title": "Declare JavaScript Objects as Variables",
      "description": [
        "在我们深入 <strong>面向对象编程之前</strong> ，让我们先回顾一下Javascript的 <strong>对象（Object）</strong> ",
        "给你的 <code>motorBike</code> 对象添加 <code>wheels</code>, <code>engines</code> 和 <code>seats</code> 属性， 并且设置他们的数量"
      ],
      "challengeSeed": [
        "var car = {",
        "  \"wheels\":4,",
        "  \"engines\":1,",
        "  \"seats\":5",
        "};",
        "",
        "var motorBike = {",
        "",
        "  // 只能在这一行下面写代码",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(motorBike);})();"
      ],
      "solutions": [
        "var car = {\n  \"wheels\":4,\n  \"engines\":1,\n  \"seats\":5\n};\n\nvar motorBike = {\n  \"wheels\": 4,\n  \"engines\": 1,\n  \"seats\": 2\n};"
      ],
      "tests": [
        "assert(typeof motorBike.engines === 'number', 'message: <code>motorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof motorBike.wheels === 'number', 'message: <code>motorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof motorBike.seats === 'number', 'message: <code>motorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb2bdef",
      "title": "Construct JavaScript Objects with Functions",
      "description": [
        "除了上一种方法外，我们还可以使用<strong>构造函数</strong>来创建对象。",
        " <strong>构造函数</strong> 通常使用大写字母开头，以便把自己和其他普通函数区别开。",
        "下面便是一个 <strong>构造函数</strong> 了：",
        "<blockquote>var Car = function() {<br>&nbsp;&nbsp;this.wheels = 4;<br>&nbsp;&nbsp;this.engines = 1;<br>&nbsp;&nbsp;this.seats = 1;<br>};</blockquote>",
        "在 <strong> 构造函数 </strong> 中， <code>this</code> 指向将要被此 <strong>构造函数</strong> 创建出来的的 <strong>对象</strong> 。所以，当我们在 <strong>构造函数</strong> 中写：",
        "<code>&nbsp;&nbsp;this.wheels = 4;</code>",
        "这时，它创建出来的新<strong>对象</strong>将带有 <code>wheels</code> 属性，并且赋值为 <code>4</code>.",
        "你可以认为 <strong>构造函数</strong> 描述了它所创建出来的<strong>对象</strong>。",
        "让你的 <code>MotorBike</code> <strong>构造函数</strong> 描述一个具有 <code>wheels</code>, <code>engines</code> 和 <code>seats</code> 属性的 <strong>对象</strong> ，并且为这些属性设置值。"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var MotorBike = function() {",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(new MotorBike());})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nvar MotorBike = function() {\n  this.engines = 1;\n  this.seats = 1;\n  this.wheels = 4;\n};\n\nvar myMotorBike = new MotorBike();"
      ],
      "tests": [
        "assert(typeof (new MotorBike()).engines === 'number', 'message: <code>MotorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).wheels === 'number', 'message: <code>MotorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).seats === 'number', 'message: <code>MotorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb4bdef",
      "title": "Make Instances of Objects with a Constructor Function",
      "description": [
        "现在，我们把上一节课我们写的 <strong>构造函数</strong> 在这里用起来！",
        "使用构造函数时，我们通过在它前面使用 <code>new</code> <strong>关键字</strong> 来对它进行调用，如下：",
        "<code>var myCar = new Car();</code>",
        "<code>myCar</code> 现在成为了 <code>Car</code> 的一个 <strong>实例</strong>（instance），它被 <strong>构造函数</strong> 描述成下面的样子：",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 4,<br>&nbsp;&nbsp;engines: 1,<br>&nbsp;&nbsp;seats: 1<br>}</blockquote>",
        "记住：要使用 <code>new</code> <strong>关键字</strong> 去调用构造函数。因为只有这样，Javascript才知道这是要去构造一个新 <strong>对象</strong> ，并且把构造函数中的 <code>this</code> 指向这个新对象。",
        "现在，当 <code>myCar</code> （即 <code>Car</code> 的一个 <strong>实例</strong> ）创建后，他可以像普通对象一样被使用，包括创建、访问、修改它的属性等，就像我们使用其他对象一样。如下：",
        "<code>myCar.turboType = \"twin\";</code>",
        "我们的 <code>myCar</code> 变量现在有了一个 <code>turboType</code> 属性了，且值为 <code>\"twin\"</code> 。",
        "在编辑器中，使用 <code>Car</code> 这个构造函数去创建一个新的 <strong>实例</strong> ，并且把这个实例赋值给 <code>myCar</code> 。",
        "然后给 <code>myCar</code> 创建一个 <code>nickname</code> 属性，且属性值为一个字符串"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nmyCar.nickname = \"Lucy\";"
      ],
      "tests": [
        "assert((new Car()).wheels === 4, 'message: The property <code>wheels</code> should still be <code>4</code> in the object <code>constructor</code>.');",
        "assert(typeof (new Car()).nickname === 'undefined', 'message: There should not be a property <code>nickname</code> in the object <code>constructor</code>.');",
        "assert(myCar.wheels === 4, 'message: The property <code>wheels</code> of <code>myCar</code> should equal <code>4</code>.');",
        "assert(typeof myCar.nickname === 'string', 'message: The property <code>nickname</code> of <code>myCar</code> should be a string.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "563cfb55594311ffcb333c70",
      "title": "Make Unique Objects by Passing Parameters to our Constructor",
      "description": [
        "The <code>constructor</code> we have is great, but what if we don't always want to create the same object?",
        "To solve this we can add <code>parameters</code> to our <code>constructor</code>. We do this like the following example:",
        "<blockquote>var Car = function(wheels, seats, engines) {<br>&nbsp;&nbsp;this.wheels = wheels;<br>&nbsp;&nbsp;this.seats = seats;<br>&nbsp;&nbsp;this.engines = engines;<br>};</blockquote>",
        "Now we can pass in <code>arguments</code> when we call our <code>constructor</code>.",
        "<code>var myCar = new Car(6, 3, 1);</code>",
        "This code will create an object that uses the <code>arguments</code> we passed in and looks like:",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 6,<br>&nbsp;&nbsp;seats: 3,<br>&nbsp;&nbsp;engines: 1<br>}</blockquote>",
        "Now give it a try yourself! Alter the <code>Car</code> <code>constructor</code> to use <code>parameters</code> to assign values to the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.",
        "Then call your new <code>constructor</code> with three number <code>arguments</code> and assign it to <code>myCar</code> to see it in action."
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  //Change this constructor",
        "  this.wheels = 4;",
        "  this.seats = 1;",
        "  this.engines = 1;",
        "};",
        "",
        "//Try it out here",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function(wheels,seats,engines) {\n  this.wheels = wheels;\n  this.seats = seats;\n  this.engines = engines;\n};\n\nvar myCar = new Car(4,1,1);"
      ],
      "tests": [
        "assert((function(){var testCar = new Car(3,1,2); return testCar.wheels === 3 && testCar.seats === 1 && testCar.engines === 2;})(), 'message: Calling <code>new Car(3,1,2)</code> should produce an object with a <code>wheels</code> property of <code>3</code>, a <code>seats</code> property of <code>1</code>, and an <code>engines</code> property of <code>2</code>.');",
        "assert((function(){var testCar = new Car(4,4,2); return testCar.wheels === 4 && testCar.seats === 4 && testCar.engines === 2;})(), 'message: Calling <code>new Car(4,4,2)</code> should produce an object with a <code>wheels</code> property of <code>4</code>, a <code>seats</code> property of <code>4</code>, and an <code>engines</code> property of <code>2</code>.');",
        "assert((function(){var testCar = new Car(2,6,3); return testCar.wheels === 2 && testCar.seats === 6 && testCar.engines === 3;})(), 'message: Calling <code>new Car(2,6,3)</code> should produce an object with a <code>wheels</code> property of <code>2</code>, a <code>seats</code> property of <code>6</code>, and an <code>engines</code> property of <code>3</code>.');",
        "assert(typeof myCar.wheels === 'number' && typeof myCar.seats === 'number' && typeof myCar.engines === 'number', 'message: <code>myCar</code> should have number values for the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb3bdef",
      "title": "Make Object Properties Private",
      "description": [
        "Objects have their own attributes, called <code>properties</code>, and their own functions, called <code>methods</code>.",
        "In the previous challenges, we used the <code>this</code> keyword to reference <code>public properties</code> of the current object.",
        "We can also create <code>private properties</code> and <code>private methods</code>, which aren't accessible from outside the object.",
        "To do this, we create the variable inside the <code>constructor</code> using the <code>var</code> keyword we're familiar with, instead of creating it as a <code>property</code> of <code>this</code>.",
        "This is useful for when we need to store information about an object but we want to control how it is used by outside code.",
        "For example, what if we want to store the <code>speed</code> our car is traveling at but we only want outside code to be able to modify it by accelerating or decelerating, so the speed changes in a controlled way?",
        "In the editor you can see an example of a <code>Car</code> <code>constructor</code> that implements this pattern.",
        "Now try it yourself! Modify the <code>Bike</code> <code>constructor</code> to have a <code>private property</code> called <code>gear</code> and two <code>public methods</code> called <code>getGear</code> and <code>setGear</code> to get and set that value."
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  // this is a private variable",
        "  var speed = 10;",
        "",
        "  // these are public methods",
        "  this.accelerate = function(change) {",
        "    speed += change;",
        "  };",
        "",
        "  this.decelerate = function() {",
        "    speed -= 5;",
        "  };",
        "",
        "  this.getSpeed = function() {",
        "    return speed;",
        "  };",
        "};",
        "",
        "var Bike = function() {",
        "",
        "  // 只能在这一行下面写代码",
        "",
        "};",
        "",
        "var myCar = new Car();",
        "",
        "var myBike = new Bike();"
      ],
      "tail": [
        "if(myBike.hasOwnProperty('getGear')){(function() {return JSON.stringify(myBike.getGear());})();}"
      ],
      "solutions": [
        "var Car = function() {\n  var speed = 10;\n\n  this.accelerate = function(change) {\n    speed += change;\n  };\n\n  this.decelerate = function() {\n    speed -= 5;\n  };\n\n  this.getSpeed = function() {\n    return speed;\n  };\n};\n\nvar Bike = function() {\n  var gear = 1;\n  \n  this.getGear = function() {\n    return gear;\n  };\n  \n  this.setGear = function(newGear) {\n    gear = newGear;\n  };\n};\n\nvar myCar = new Car();\n\nvar myBike = new Bike();"
      ],
      "tests": [
        "assert(typeof myBike.getGear !== 'undefined' && typeof myBike.getGear === 'function', 'message: The method <code>getGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.setGear !== 'undefined' && typeof myBike.setGear === 'function', 'message: The method <code>setGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.gear === 'undefined', 'message: <code>myBike.gear</code> should remain undefined.');",
        "assert.strictEqual((function () { myBike.setGear(4); return myBike.getGear(); })(), 4, 'message: <code>myBike.getGear()</code> should return <code>4</code> after calling <code>myBike.setGear(4)</code>.');",
        "assert.strictEqual((function () { myBike.setGear(3); return myBike.getGear(); })(), 3, 'message: <code>myBike.getGear()</code> should return <code>3</code> after calling <code>myBike.setGear(3)</code>.');",
        "assert.strictEqual((function () { myBike.setGear(1); return myBike.getGear(); })(), 1, 'message: <code>myBike.getGear()</code> should return <code>1</code> after calling <code>myBike.setGear(1)</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb7bdef",
      "title": "Iterate over Arrays with .map",
      "description": [
        "The <code>map</code> method is a convenient way to iterate through arrays. Here's an example usage:",
        "<blockquote>var timesFour = oldArray.map(function(val){<br>&nbsp;&nbsp;return val * 4;<br>});</blockquote>",
        "",
        "The <code>map</code> method will iterate through every element of the array, creating a new array with values that have been modified by the callback function, and return it.  Note that it does not modify the original array.",
        "In our example the callback only uses the value of the array element (the <code>val</code> argument) but your callback can also include arguments for the <code>index</code> and <code>array</code> being acted on.",
        "Use the map function to add 3 to every value in the variable <code>oldArray</code>, and save the results into variable <code>newArray</code>. oldArray should not change."
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3,4,5];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(oldArray, [1,2,3,4,5], 'message: You should not change the original array.');",
        "assert.deepEqual(newArray, [4,5,6,7,8], 'message: You should add three to each value in the array.');",
        "assert(editor.getValue().match(/\\.map\\s*\\(/gi), 'message: You should be making use of the <code>map</code> method.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\]/gi), 'message: You should only modify the array with <code>map</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb8bdef",
      "title": "Condense arrays with .reduce",
      "description": [
        "The array method <code>reduce</code> is used to iterate through an array and condense it into one value.",
        "To use <code>reduce</code> you pass in a callback whose arguments are an accumulator (in this case, <code>previousVal</code>) and the current value (<code>currentVal</code>).",
        "<code>reduce</code> has an optional second argument which can be used to set the initial value of the accumulator. If no initial value is specified it will be the first array element and <code>currentVal</code> will start with the second array element.",
        "Here is an example of <code>reduce</code> being used to subtract all the values of an array:",
        "<blockquote>var singleVal = array.reduce(function(previousVal, currentVal) {<br>&nbsp;&nbsp;return previousVal - currentVal;<br>}, 0);</blockquote>",
        "Use the <code>reduce</code> method to sum all the values in <code>array</code> and assign it to <code>singleVal</code>."
      ],
      "challengeSeed": [
        "var array = [4,5,6,7,8];",
        "var singleVal = 0;",
        "",
        "// 只能在这一行下面写代码",
        "",
        "singleVal = array;"
      ],
      "tail": [
        "(function() {return singleVal;})();"
      ],
      "tests": [
        "assert(singleVal == 30, 'message: <code>singleVal</code> should be equal to the sum of all items in the <code>array</code> variable.');",
        "assert(editor.getValue().match(/\\.reduce\\s*\\(/gi), 'message: You should have made use of the <code>reduce</code> method.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c15feddfaeb9bdef",
      "title": "Filter Arrays with .filter",
      "description": [
        "The <code>filter</code> method is used to iterate through an array and filter out elements where a given condition is not true.",
        "<code>filter</code> is passed a callback function which takes the current value (we've called that <code>val</code>) as an argument.",
        "Any array element for which the callback returns true will be kept and elements that return false will be filtered out.",
        "The following code is an example of using <code>filter</code> to remove array elements that are equal to five:",
        "Note: We omit the second and third arguments since we only need the value",
        "<blockquote>array = array.filter(function(val) {<br>&nbsp;&nbsp;return val !== 5;<br>});</blockquote>",
        "Use <code>filter</code> to create a new array with all the values from <code>oldArray</code> which are less than 6.<br><code>oldArray</code> should not change."
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3,4,5,6,7,8,9,10];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "var newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(oldArray, [1,2,3,4,5,6,7,8,9,10], 'message: You should not change the original array.');",
        "assert.deepEqual(newArray, [1,2,3,4,5], 'message: You should have filtered out all values from the array that are greater than 5.');",
        "assert(editor.getValue().match(/array\\.filter\\s*\\(/gi), 'message: You should be using the <code>filter</code> method to create a new array.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7\\,8\\,9\\,10\\]/gi), 'message: You should only be using <code>filter</code> to make the new array.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb1bdef",
      "title": "Sort Arrays with .sort",
      "description": [
        "You can use the method <code>sort</code> to easily sort the values in an array alphabetically or numerically.",
        "Unlike the previous array methods we have been looking at, <code>sort</code> actually alters the array in place. However, it also returns this sorted array.",
        "<code>sort</code> can be passed a compare function as a callback. The compare function should return a negative number if <code>a</code> should be before <code>b</code>, a positive number if <code>a</code> should be after <code>b</code>, or <code>0</code> if they are equal.",
        "If no compare function is passed in it will convert the values to strings and sort alphabetically.",
        "Here is an example of using sort with a compare function that will sort the elements from smallest to largest number:",
        "<blockquote>var array = [1, 12, 21, 2];<br>array.sort(function(a, b) {<br>&nbsp;&nbsp;return a - b;<br>});</blockquote>",
        "Use <code>sort</code> to sort <code>array</code> from largest to smallest."
      ],
      "challengeSeed": [
        "var array = [1, 12, 21, 2];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "array.sort();"
      ],
      "tail": [
        "(function() {return array;})();"
      ],
      "tests": [
        "assert.deepEqual(array, [21, 12, 2, 1], 'message: You should have sorted the array from largest to smallest.');",
        "assert(editor.getValue().match(/\\[1,\\s*12,\\s*21,\\s*2\\];/gi), 'message: You should only be using <code>sort</code> to modify the array.');",
        "assert(editor.getValue().match(/\\.sort\\s*\\(/g), 'message: You should have made use of the <code>sort</code> method.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb2bdef",
      "title": "Reverse Arrays with .reverse",
      "description": [
        "You can use the <code>reverse</code> method to reverse the elements of an array.",
        "<code>reverse</code> is another array method that alters the array in place, but it also returns the reversed array.",
        "<blockquote>var myArray = [1, 2, 3];<br>myArray.reverse();</blockquote>",
        "<em>returns [3, 2, 1]</em>",
        "Use <code>reverse</code> to reverse the <code>array</code> variable and assign it to <code>newArray</code>."
      ],
      "challengeSeed": [
        "var array = [1,2,3,4,5,6,7];",
        "var newArray = [];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "newArray = array;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(newArray, [7,6,5,4,3,2,1], 'message: You should reverse the array.');",
        "assert(editor.getValue().match(/\\.reverse\\s*\\(\\)/gi), 'message: You should use the <code>reverse</code> method.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\,4\\,5\\,6\\,7/gi), 'message: You should only be using <code>reverse</code> to modify <code>array</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb3bdef",
      "title": "Concatenate Arrays with .concat",
      "description": [
        "<code>concat</code> can be used to merge the contents of two arrays into one.",
        "<code>concat</code> takes an array as an argument and returns a new array with the elements of this array concatenated onto the end.",
        "Here is an example of <code>concat</code> being used to concatenate <code>otherArray</code> onto the end of <code>oldArray</code>:",
        "<code>newArray = oldArray.concat(otherArray);</code>",
        "Use <code>.concat()</code> to concatenate <code>concatMe</code> onto the end of <code>oldArray</code> and assign it to <code>newArray</code>."
      ],
      "challengeSeed": [
        "var oldArray = [1,2,3];",
        "var newArray = [];",
        "",
        "var concatMe = [4,5,6];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "newArray = oldArray;"
      ],
      "tail": [
        "(function() {return newArray;})();"
      ],
      "tests": [
        "assert.deepEqual(newArray, [1,2,3,4,5,6], 'message: You should concatenate the two arrays together.');",
        "assert(editor.getValue().match(/\\.concat\\s*\\(/gi), 'message: You should be using the <code>concat</code> method to merge the two arrays.');",
        "assert(editor.getValue().match(/\\[1\\,2\\,3\\]/gi) && editor.getValue().match(/\\[4\\,5\\,6\\]/gi), 'message: You should only be using <code>concat</code> to modify the arrays.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb4bdef",
      "title": "Split Strings with .split",
      "description": [
        "You can use the <code>split</code> method to split a string into an array.",
        "<code>split</code> uses the argument you pass in as a delimiter to determine which points the string should be split at.",
        "Here is an example of <code>split</code> being used to split an array at every <code>s</code> character:",
        "<code>var array = string.split('s');</code>",
        "Use <code>split</code> to create an array of words from <code>string</code> and assign it to <code>array</code>."
      ],
      "challengeSeed": [
        "var string = \"Split me into an array\";",
        "var array = [];",
        "",
        "// 只能在这一行下面写代码",
        "",
        "array = string;"
      ],
      "tail": [
        "(function() {return array;})();"
      ],
      "tests": [
        "assert(/\\.split\\(/gi, 'message: You should use the <code>split</code> method on the string.');",
        "assert(typeof array === 'object' && array.length === 5, 'message: You should split the string by its spaces.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c16feddfaeb5bdef",
      "title": "Join Strings with .join",
      "description": [
        "We can use the <code>join</code> method to join each element of an array into a string separated by whatever delimiter you provide as an argument.",
        "The following is an example of using <code>join</code> to join all of the elements of an array into a string with all the elements separated by word <code>and</code>:",
        "<blockquote>var veggies = [\"Celery\", \"Radish\", \"Carrot\", \"Potato\"];<br>var salad = veggies.join(\" and \");<br>console.log(salad); // \"Celery and Radish and Carrot and Potato\" </blockquote>",
        "Use the <code>join</code> method to create a string from <code>joinMe</code> with spaces in between each element and assign it to <code>joinedString</code>."
      ],
      "challengeSeed": [
        "var joinMe = [\"Split\",\"me\",\"into\",\"an\",\"array\"];",
        "var joinedString = '';",
        "",
        "// 只能在这一行下面写代码",
        "",
        "joinedString = joinMe;"
      ],
      "tail": [
        "(function() {return joinedString;})();"
      ],
      "tests": [
        "assert(typeof joinedString === 'string' && joinedString === \"Split me into an array\", 'message: You should join the elements of the array with spaces.');",
        "assert(/\\.join\\(/gi, 'message: You should use of the <code>join</code> method on the array.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    }
  ]
}