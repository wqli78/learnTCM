{
  "name": "Basic JavaScript",
  "time": "10 hours",
  "order": 6,
  "helpRoom": "HelpJavaScript",
  "challenges": [
    {
      "id": "bd7123c9c441eddfaeb4bdef",
      "title": "Comment your JavaScript Code",
      "description": [
        "注释的代码行在JavaScript之中是不会运行的。注释是一个非常好的方法来让你自己以及其他人明白这段代码是怎么运行的。",
        "JavaScript中的注释方式有以下两种：",
        "使用 <code>//</code> 来告诉JavaScript来忽略当前行的代码",
        "<blockquote>// This is an in-line comment.</blockquote>",
        "你也可以使用多行注释来注释你的代码，以<code>/*</code>开始，用<code>*/</code>来结束，就像下面这样：",
        "<blockquote>/* This is a <br>   multi-line comment */</blockquote>",
        "<strong>Best Practice</strong><br>, 你应该经常对你写的方法进行注释，来让你的代码看起来更加地清晰易懂。良好的注释能够清晰地传达你写的代码的意图&mdash;对于那些其他读你的代码的人来说<em>以及</em>对于未来你看到它的时候，还能理解这段代码的意图。",
        "<h4>Instructions</h4>",
        "尝试创建这两种类型的注释。"
      ],
      "challengeSeed": [
        ""
      ],
      "solutions": [
        "// Fake Comment\n/* Another Comment */"
      ],
      "tests": [
        "assert(code.match(/(\\/\\/)...../g), 'message: Create a <code>//</code> style comment that contains at least five letters.');",
        "assert(code.match(/(\\/\\*)[\\w\\W]{5,}(?=\\*\\/)/gm), 'message: Create a <code>/* */</code> style comment that contains at least five letters.');",
        "assert(code.match(/(\\*\\/)/g), 'message: Make sure that you close the comment with a <code>*/</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c443eddfaeb5bdef",
      "title": "Declare JavaScript Variables",
      "description": [
        "在计算机科学中, <code>data</code>(数据)就是一切，因为它对于计算机的意义重大。JavaScript提供七种不同的<dfn>data types</dfn>(数据类型)，它们是<code>undefined</code>（无定义）, <code>null</code>（空）, <code>Boolean</code>（布尔型）, <code>string</code>（字符串）, <code>symbol</code>(符号), <code>number</code>（数字）, and <code>object</code>（对象）。",
        "举个栗子, 计算机能够辨别不同的数字, 例如数字 <code>12</code>,和 <code>strings</code>, <code>\"12\"</code>和<code>\"dog\"</code>, or <code>\"123 cats\"</code>, 都是数组。 计算机能够精确地执行对数字的各种操作, 但是对于字符串却无能为力",
        "<code>Variables</code>（变量）允许计算机一种动态的形式来存储数据, 避免了由于公式中的数据的经常变动而需要不断地更新一个公式中的数据。以上的七种不同的数据类型的其中一种都可以存储到一个变量（variable）中",
        "<code>Variables</code> 非常类似于您在数学中使用的x,y变量, 这意味着它们都是以一个简单命名的名字来代替我们赋值给它的数据。计算机中的<code>variables</code>（变量）不同于数学中的变量的一点就是，计算机可以在不同的时间存储不同类型的变量。",
        "通过在变量的前面使用关键字<code>var</code>，我们告诉 JavaScript 来创建或者 <dfn>declare</dfn>（声明）一个变量,就像这样：",
        "<blockquote>var ourName;</blockquote>",
        "上面代码的意思是创建一个名为<code>ourName</code>的<code>variable</code>（变量）。在JavaScript中我们使用分号来分隔去结束一段声明。",
        "<code>Variable</code> （变量）的名字可以由数字，字母, 和 <code>$</code> 或者 <code>_</code>组成，但是不能包含空格或者以数字为首。",
        "<h4>Instructions</h4>",
        "使用<code>var</code> 关键字来创建一个名为<code>myName</code>的变量。",
        "<strong>提示</strong><br>如果您卡住了，请看下<code>ourName</code>的例子是怎么写的。"
      ],
      "challengeSeed": [
        "// Example",
        "var ourName;",
        "",
        "// Define myName below this line",
        ""
      ],
      "tail": [
        "if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}"
      ],
      "solutions": [
        "var myName;"
      ],
      "tests": [
        "assert(/var\\s+myName\\s*;/.test(code), 'message: You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244a8",
      "title": "Storing Values with the Equal Operator",
      "description": [
        "在JavaScript中，把一个值赋值到一个变量中，您可以使用 <dfn>assignment</dfn> 或者 <code>equal</code> (<code>=</code>) 来操作。",
        "<code>myVariable = 5;</code>",
        "把<code>Number</code>数字<code>5</code>的值赋给变量<code>myVariable</code>。",
        "赋值过程是从右到左进行的。所有 <code>=</code> 操作符右边的值都会被赋值到左边的变量。",
        "<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>",
        "数值 <code>5</code> 被赋值到变量 <code>myVar</code> 中， 然后接着变量 <code>myVar</code> 又赋值给变量 <code>myNum</code> ，这样子 <code>myNum</code> 变量中的值也是 <code>5</code> 了。",
        "<h4>Instructions</h4>",
        "把数值 <code>7</code> 赋值给变量 <code>a</code>。",
        "把变量 <code>a</code> 中的内容赋值给变量 <code>b</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var a;",
        "var b = 2;",
        "",
        "// Only change code below this line",
        ""
      ],
      "tail": [
        "(function(a,b){return \"a = \" + a + \", b = \" + b;})(a,b);"
      ],
      "solutions": [
        "var a;\nvar b = 2;\na = 7;\nb = a;"
      ],
      "tests": [
        "assert(/var a;/.test(code) && /var b = 2;/.test(code), 'message: Do not change code above the line');",
        "assert(typeof a === 'number' && a === 7, 'message: <code>a</code> should have a value of 7');",
        "assert(typeof b === 'number' && b === 7, 'message: <code>b</code> should have a value of 7');",
        "assert(/b\\s*=\\s*a\\s*;/g.test(code), 'message: <code>a</code> should be assigned to <code>b</code> with <code>=</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244a9",
      "title": "Initializing Variables with the Equal Operator",
      "description": [
        "通常地我们会在<dfn>initialize</dfn>开始声明变量的时候就会给变量赋值一个初始值。",
        "<code>var myVar = 0;</code>",
        "创建一个名为 <code>myVar</code> 的变量并指定一个初始值 <code>0</code>。",
        "<h4>Instructions</h4>",
        "通过关键字 <code>var</code> 定义一个变量 <code>a</code> 并且给它一个初始值 <code>9</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var ourVar = 19;",
        "",
        "// Only change code below this line",
        ""
      ],
      "tail": [
        "if(typeof a !== 'undefined') {(function(a){return \"a = \" + a;})(a);} else { (function() {return 'a is undefined';})(); }"
      ],
      "solutions": [
        "var a = 9;"
      ],
      "tests": [
        "assert(/var\\s+a\\s*=\\s*9\\s*/.test(code), 'message: Initialize <code>a</code> to a value of <code>9</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244aa",
      "title": "Understanding Uninitialized Variables",
      "description": [
        "当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 <code>undefined</code>。当您对一个值为 <code>undefined</code> 的变量进行运算操作的时候，算出来的结果将会是 <code>NaN</code>，<code>NaN</code> 的意思是 <dfn>\"Not a Number\"</dfn>。当您用一个没有 <code>定义</code> 的变量来做字符串连接操作的时候，它会如实的输出一段 <dfn>string</dfn> (字符串) <code>\"undefined\"</code>。",
        "<h4>Instructions</h4>",
        "定义3个变量 <code>a</code>, <code>b</code>, and <code>c</code> ，并且分别给他们赋值为：<code>5</code>, <code>10</code>，和 <code>\"I am a\"</code> ，这样它们就不会是 <code>undefined</code> （没定义的了）。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Initialize these three variables",
        "var a;",
        "var b;",
        "var c;",
        "",
        "// Do not change code below this line",
        "",
        "a = a + 1;",
        "b = b + 5;",
        "c = c + \" String!\";",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);"
      ],
      "solutions": [
        "var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"
      ],
      "tests": [
        "assert(typeof a === 'number' && a === 6, 'message: <code>a</code> should be defined and have a value of <code>6</code>');",
        "assert(typeof b === 'number' && b === 15, 'message: <code>b</code> should be defined and have a value of <code>15</code>');",
        "assert(!/undefined/.test(c) && c === \"I am a String!\", 'message: <code>c</code> should not contain <code>undefined</code> and should have a value of \"I am a String!\"');",
        "assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), 'message: Do not change code below the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ab",
      "title": "Understanding Case Sensitivity in Variables",
      "description": [
        "在 JavaScript 中所有的变量都是大小写敏感的。这意味着你要注意大写字母。",
        "<code>MYVAR</code> 与这个 <code>MyVar</code> 还有这个 <code>myvar</code> 是不同的。这就有可能有多个截然不同的变量却有着有相同的名字。正是由于以上原因所以强烈地建议你, <em>不要</em> 使用这一特性。（以免给自己带来麻烦）",
        "<h4>Best Practice</h4>",
        "使用 <dfn>驼峰命名法</dfn> 来书写一个 Javascript 变量，在 <dfn>驼峰命名法</dfn> 中，含有变量名是多个单词组成的第一个单词的首字母小写，后面的单词的第一个字母大写。",
        "<strong>举个栗子:</strong>",
        "<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsTooLong;</blockquote>",
        "<h4>Instructions</h4>",
        "修正声明的变量，让它们的命名符合 <dfn>驼峰命名法</dfn> 的规范。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Declarations",
        "var StUdLyCapVaR;",
        "var properCamelCase;",
        "var TitleCaseOver;",
        "",
        "// Assignments",
        "STUDLYCAPVAR = 10;",
        "PRoperCAmelCAse = \"A String\";",
        "tITLEcASEoVER = 9000;"
      ],
      "solutions": [
        "var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"
      ],
      "tests": [
        "assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10, 'message: <code>studlyCapVar</code> is defined and has a value of <code>10</code>');",
        "assert(typeof properCamelCase !== 'undefined' && properCamelCase === \"A String\", 'message: <code>properCamelCase</code> is defined and has a value of <code>\"A String\"</code>');",
        "assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000, 'message: <code>titleCaseOver</code> is defined and has a value of <code>9000</code>');",
        "assert(code.match(/studlyCapVar/g).length === 2, 'message: <code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.');",
        "assert(code.match(/properCamelCase/g).length === 2, 'message: <code>properCamelCase</code> should use camelCase in both declaration and assignment sections.');",
        "assert(code.match(/titleCaseOver/g).length === 2, 'message: <code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb3bdef",
      "title": "Add Two Numbers with JavaScript",
      "description": [
        "<code>Number</code>（数字）是一种在 JavaScript 中来代表数值的一种类型。",
        "现在让我们来尝试在 JavaScript 中加入两个数字。",
        "JavaScript 中使用 <code>+</code> 号来让两个数字执行加法运算。",
        "",
        "<strong>举个栗子</strong>",
        "<blockquote>myVar = 5 + 10; // 等于 15</blockquote>",
        "",
        "<h4>Instructions</h4>",
        "改变数字 <code>0</code> 让变量 sum 的值为 <code>20</code>."
      ],
      "challengeSeed": [
        "var sum = 10 + 0;",
        ""
      ],
      "tail": [
        "(function(z){return 'sum='+z;})(sum);"
      ],
      "solutions": [
        "var sum = 10 + 10;"
      ],
      "tests": [
        "assert(sum === 20, 'message: <code>sum</code> should equal <code>20</code>');",
        "assert(/\\+/.test(code), 'message: Use the <code>+</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb4bdef",
      "title": "Subtract One Number from Another with JavaScript",
      "description": [
        "我们也可以在 JavaScript 中执行减法运算。",
        "JavaScript 中使用 <code>-</code> 来做减法运算。",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 12 - 6; // 等于 6</blockquote>",
        "",
        "<h4>Instructions</h4>",
        "改变数字 <code>0</code> 让变量 difference 的值为 <code>12</code>。"
      ],
      "challengeSeed": [
        "var difference = 45 - 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'difference='+z;})(difference);"
      ],
      "solutions": [
        "var difference = 45 - 33;"
      ],
      "tests": [
        "assert(difference === 12, 'message: Make the variable <code>difference</code> equal 12.');",
        "assert((code).match(/difference/g).length === 1,'message: Only change the first line');",
        "assert(/\\d+\\s*-\\s*\\d+/.test(code),'message: Use the <code>-</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1231c1c11feddfaeb5bdef",
      "title": "Multiply Two Numbers with JavaScript",
      "description": [
        "我们也可在 JavaScript 中使用乘法运算。",
        "JavaScript 使用这个 <code>*</code> 符号来让两个数字相乘。",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 13 * 13; // assigned 169</blockquote>",
        "",
        "<h4>Instructions</h4>",
        "改变数值 <code>0</code> 来让变量 product 的值等于 <code>80</code>。"
      ],
      "challengeSeed": [
        "var product = 8 * 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'product = '+z;})(product);"
      ],
      "solutions": [
        "var product = 8 * 10;"
      ],
      "tests": [
        "assert(product === 80,'message: Make the variable <code>product</code> equal 80');",
        "assert(/\\*/.test(code), 'message: Use the <code>*</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb6bdef",
      "title": "Divide One Number by Another with JavaScript",
      "description": [
        "我们可以在 JavaScript 中做除法运算。",
        "JavaScript 中使用 <code>/</code> 符号做除法运算。",
        "",
        "<strong>Example</strong>",
        "<blockquote>myVar = 16 / 2; // assigned 8</blockquote>",
        "",
        "<h4>Instructions</h4>",
        "Change the <code>0</code> so that the <code>quotient</code> is equal to <code>2</code>."
      ],
      "challengeSeed": [
        "var quotient = 66 / 0;",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'quotient = '+z;})(quotient);"
      ],
      "solutions": [
        "var quotient = 66 / 33;"
      ],
      "tests": [
        "assert(quotient === 2, 'message: Make the variable <code>quotient</code> equal to 2.');",
        "assert(/\\d+\\s*\\/\\s*\\d+/.test(code), 'message: Use the <code>/</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ac",
      "title": "Increment a Number with JavaScript",
      "description": [
        "使用 <code>++</code> ，我们可以很容易地对变量进行自增或者加一运算。",
        "<code>i++;</code>",
        "等效于",
        "<code>i = i + 1;</code>",
        "<strong>Note</strong><br>这种写法 <code>i++;</code>, 省去了书写=符号的必要。",
        "<h4>Instructions</h4>",
        "重写代码，使用 <code>++</code> 来对变量 <code>myVar</code> 进行自增操作。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myVar = 87;",
        "",
        "// Only change code below this line",
        "myVar = myVar + 1;",
        ""
      ],
      "tail": [
        "(function(z){return 'myVar = ' + z;})(myVar);"
      ],
      "solutions": [
        "var myVar = 87;\nmyVar++;"
      ],
      "tests": [
        "assert(myVar === 88, 'message: <code>myVar</code> should equal <code>88</code>');",
        "assert(/myVar\\s*[+]{2}/.test(code), 'message: Use the <code>++</code> operator');",
        "assert(/var myVar = 87;/.test(code), 'message: Do not change code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ad",
      "title": "Decrement a Number with JavaScript",
      "description": [
        "使用自减符号 <code>--</code> ，您可以很方便地对一个变量执行 <dfn>自减</dfn> 或者减一操作。",
        "<code>i--;</code>",
        "等效于",
        "<code>i = i - 1;</code>",
        "<strong>Note</strong><br>这种操作 <code>i--;</code>, 省去了书写等号的必要。",
        "<h4>Instructions</h4>",
        "重写代码，使用 <code>--</code> 符号对 <code>myVar</code> 执行自减操作。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myVar = 11;",
        "",
        "// Only change code below this line",
        "myVar = myVar - 1;",
        ""
      ],
      "tail": [
        "(function(z){return 'myVar = ' + z;})(myVar);"
      ],
      "solutions": [
        "var myVar = 11;\nmyVar--;"
      ],
      "tests": [
        "assert(myVar === 10, 'message: <code>myVar</code> should equal <code>10</code>');",
        "assert(/myVar\\s*[-]{2}/.test(code), 'message: Use the <code>--</code> operator on <code>myVar</code>');",
        "assert(/var myVar = 11;/.test(code), 'message: Do not change code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1391c1c11feddfaeb4bdef",
      "title": "Create Decimal Numbers with JavaScript",
      "description": [
        "我们也可以把小数存储到变量中。小数有时会被称作 <dfn>浮点</dfn> 数字或被称作 <dfn>浮点</dfn> 。",
        "<strong>Note</strong><br>不是所有的实数都可以用 <dfn>浮点</dfn> 数来表示。因此可能导致四舍五入的错误。<a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">详情在这儿</a>。",
        "<h4>Instructions</h4>",
        "创建一个变量 <code>myDecimal</code> 并给它给它一个十进制值与小数部分 (e.g. <code>5.7</code>)。"
      ],
      "challengeSeed": [
        "var ourDecimal = 5.7;",
        "",
        "// Only change code below this line",
        "",
        ""
      ],
      "tail": [
        "(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();"
      ],
      "solutions": [
        "var myDecimal = 9.9;"
      ],
      "tests": [
        "assert(typeof myDecimal === \"number\", 'message: <code>myDecimal</code> should be a number.');",
        "assert(myDecimal % 1 != 0, 'message: <code>myDecimal</code> should have a decimal point'); "
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9c69feddfaeb7bdef",
      "title": "Multiply Two Decimals with JavaScript",
      "description": [
        "在 JavaScript 中，您也可以用小数进行计算，就像整数一样",
        "让我们把两个小数相乘，并得到它们相乘的结果（product）。",
        "<h4>Instructions</h4>",
        "改变 <code>0.0</code> 的数值让变量的值等于 <code>5.0</code>。"
      ],
      "challengeSeed": [
        "var product = 2.0 * 0.0;",
        "",
        ""
      ],
      "tail": [
        "(function(y){return 'product = '+y;})(product);"
      ],
      "solutions": [
        "var product = 2.0 * 2.5;"
      ],
      "tests": [
        "assert(product === 5.0, 'message: The variable <code>product</code> should equal <code>5.0</code>.');",
        "assert(/\\*/.test(code), 'message: You should use the <code>*</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9ca9feddfaeb7bdef",
      "title": "Divide one Decimal by Another with JavaScript",
      "description": [
        "现在让我们来用一个小数做除法操作。",
        "<h4>Instructions</h4>",
        "改变数值 <code>0.0</code> 的值让变量 <code>quotient</code> 的值等于 <code>2.2</code>."
      ],
      "challengeSeed": [
        "var quotient = 0.0 / 2.0;",
        "",
        ""
      ],
      "tail": [
        "(function(y){return 'quotient = '+y;})(quotient);"
      ],
      "solutions": [
        "var quotient = 4.4 / 2.0;"
      ],
      "tests": [
        "assert(quotient === 2.2, 'message: The variable <code>quotient</code> should equal <code>2.2</code>.');",
        "assert(/\\//.test(code), 'message: You should use the <code>/</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ae",
      "title": "Finding a Remainder in JavaScript",
      "description": [
        " <dfn>余</dfn> 运算符 <code>%</code> 给出了两个数字相除的余数。",
        "<strong>举例</strong>",
        "<blockquote>5 % 2 = 1 因为<br>Math.floor(5 / 2) = 2 (商)<br>2 * 2 = 4<br>5 - 4 = 1 (余)</blockquote>",
        "<strong>用法</strong><br>在数学中, 一个数字可以与数字 <code>2</code> 相除得到的余来看它是属于奇数还是偶数。",
        "<blockquote>17 % 2 = 1 (17 is 奇数)<br>48 % 2 = 0 (48 is 偶数)</blockquote>",
        "<strong>Note</strong><br><dfn>余</dfn> 操作符有时被不正确地称为 \"取模\" 操作符。虽然它们之间非常相似，但是余在负数上的操作上是不能运行的。",
        "<h4>Instructions</h4>",
        "使用 <code>%</code> 操作符，让一个数与3通过求余操作使得变量 <dfn>remainder</dfn> 的值为11。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Only change code below this line",
        "",
        "var remainder;",
        ""
      ],
      "tail": [
        "(function(y){return 'remainder = '+y;})(remainder);"
      ],
      "solutions": [
        "var remainder =  11 % 3;"
      ],
      "tests": [
        "assert(remainder === 2, 'message: The value of <code>remainder</code> should be <code>2</code>');",
        "assert(/\\d+\\s*%\\s*\\d+/.test(code), 'message: You should use the <code>%</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244af",
      "title": "Assignment with Plus Equals",
      "description": [
        "在编程当中，通常通过赋值来修改变量的内容。请记住，一切操作等号右边先做求，所以我们可以这样子做：",
        "<code>myVar = myVar + 5;</code>",
        "把数值 <code>5</code> 加到变量 <code>myVar</code>上。 由于这是一种常用的模式，也有操作符是一步到位既做数学运算符也赋值的。",
        "这种操作符中的其中的一种就是 <code>+=</code> 运算符。",
        "<code>myVar += 5;</code> 也是把数值 <code>5</code> 加到变量 <code>myVar</code>上。",
        "<h4>Instructions</h4>",
        "使用 <code>+=</code> 操作符对变量 <code>a</code>, <code>b</code>, 还有变量 <code>c</code> 转换赋值的形式。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 3;",
        "var b = 17;",
        "var c = 12;",
        "",
        "// Only modify code below this line",
        "",
        "a = a + 12;",
        "b = 9 + b;",
        "c = c + 7;",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 3;\nvar b = 17;\nvar c = 12;\n\na += 12;\nb += 9;\nc += 7;"
      ],
      "tests": [
        "assert(a === 15, 'message: <code>a</code> should equal <code>15</code>');",
        "assert(b === 26, 'message: <code>b</code> should equal <code>26</code>');",
        "assert(c === 19, 'message: <code>c</code> should equal <code>19</code>');",
        "assert(code.match(/\\+=/g).length === 3, 'message: You should use the <code>+=</code> operator for each variable');",
        "assert(/var a = 3;/.test(code) && /var b = 17;/.test(code) && /var c = 12;/.test(code), 'message: Do not modify the code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b0",
      "title": "Assignment with Minus Equals",
      "description": [
        "与 <code>+=</code> 操作符类似，<code>-=</code> 操作符用来对一个变量进行减法操作。",
        "<code>myVar = myVar - 5;</code>",
        "将会从变量 <code>myVar</code> 中减去数值 <code>5</code>。也可以写成这种形式：",
        "<code>myVar -= 5;</code>",
        "<h4>Instructions</h4>",
        "使用 <code>-=</code> 操作来对变量 <code>a</code>, <code>b</code>, 还有变量 <code>c</code> 转换赋值的形式。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 11;",
        "var b = 9;",
        "var c = 3;",
        "",
        "// Only modify code below this line",
        "",
        "a = a - 6;",
        "b = b - 15;",
        "c = c - 1;",
        "",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 11;\nvar b = 9;\nvar c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;\n\n"
      ],
      "tests": [
        "assert(a === 5, 'message: <code>a</code> should equal <code>5</code>');",
        "assert(b === -6, 'message: <code>b</code> should equal <code>-6</code>');",
        "assert(c === 2, 'message: <code>c</code> should equal <code>2</code>');",
        "assert(code.match(/-=/g).length === 3, 'message: You should use the <code>-=</code> operator for each variable');",
        "assert(/var a = 11;/.test(code) && /var b = 9;/.test(code) && /var c = 3;/.test(code), 'message: Do not modify the code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b1",
      "title": "Assignment with Times Equals",
      "description": [
        "<code>*=</code> 操作符是让变量与一个数相乘并赋值。",
        "<code>myVar = myVar * 5;</code>",
        "将会把变量 <code>myVar</code> 与数值 <code>5</code>相乘。也可以被写作这样的形式: ",
        "<code>myVar *= 5;</code>",
        "<h4>Instructions</h4>",
        "使用 <code>*=</code> 操作符来改变变量 <code>a</code>, <code>b</code>, 还有变量 <code>c</code>的赋值形式。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 5;",
        "var b = 12;",
        "var c = 4.6;",
        "",
        "// Only modify code below this line",
        "",
        "a = a * 5;",
        "b = 3 * b;",
        "c = c * 10;",
        "",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 5;\nvar b = 12;\nvar c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"
      ],
      "tests": [
        "assert(a === 25, 'message: <code>a</code> should equal <code>25</code>');",
        "assert(b === 36, 'message: <code>b</code> should equal <code>36</code>');",
        "assert(c === 46, 'message: <code>c</code> should equal <code>46</code>');",
        "assert(code.match(/\\*=/g).length === 3, 'message: You should use the <code>*=</code> operator for each variable');",
        "assert(/var a = 5;/.test(code) && /var b = 12;/.test(code) && /var c = 4\\.6;/.test(code), 'message: Do not modify the code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b2",
      "title": "Assignment with Divided by Equals",
      "description": [
        "<code>/=</code> 操作符是让变量与另一个数相除并赋值。",
        "<code>myVar = myVar / 5;</code>",
        "会把变量 <code>myVar</code> 的值除于 <code>5</code>。等价于: ",
        "<code>myVar /= 5;</code>",
        "<h4>Instructions</h4>",
        "使用 <code>/=</code> 操作符来改变变量 <code>a</code>, <code>b</code>, 还有变量 <code>c</code>的赋值形式。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var a = 48;",
        "var b = 108;",
        "var c = 33;",
        "",
        "// Only modify code below this line",
        "",
        "a = a / 12;",
        "b = b / 4;",
        "c = c / 11;",
        ""
      ],
      "tail": [
        "(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);"
      ],
      "solutions": [
        "var a = 48;\nvar b = 108;\nvar c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"
      ],
      "tests": [
        "assert(a === 4, 'message: <code>a</code> should equal <code>4</code>');",
        "assert(b === 27, 'message: <code>b</code> should equal <code>27</code>');",
        "assert(c === 3, 'message: <code>c</code> should equal <code>3</code>');",
        "assert(code.match(/\\/=/g).length === 3, 'message: You should use the <code>/=</code> operator for each variable');",
        "assert(/var a = 48;/.test(code) && /var b = 108;/.test(code) && /var c = 33;/.test(code), 'message: Do not modify the code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b3",
      "title": "Convert Celsius to Fahrenheit",
      "description": [
        "为了测试您的学习效果，您将创建\"从零开始\"的解决方案。把您的代码放置在指示线之间，它会针对多个测试用例来测试。",
        "从摄氏转换为华氏的算法是：摄氏度的温度乘于9除于5，再加上32。",
        "您将得到一个变量 <code>celsius</code> 的代表摄氏度的温度。创建一个变量 <code>fahrenheit</code>，然后应用算法来求出其在华氏相应的温度。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function convert(celsius) {",
        "  // Only change code below this line",
        "  ",
        "",
        "  // Only change code above this line",
        "  if ( typeof fahrenheit !== 'undefined' ) {",
        "    return fahrenheit;",
        "  } else {",
        "    return 'fahrenheit not defined';",
        "  }",
        "}",
        "",
        "// Change the inputs below to test your code",
        "convert(30);"
      ],
      "solutions": [
        "function convert(celsius) {\n  var fahrenheit = celsius * 9/5 + 32;\n  if ( typeof fahrenheit !== 'undefined' ) {\n  return fahrenheit;\n  } else {\n    return 'fahrenheit not defined';\n  }\n}"
      ],
      "tests": [
        "assert(typeof convert(0) === 'number', 'message: <code>convert(0)</code> should return a number');",
        "assert(convert(-30) === -22, 'message: <code>convert(-30)</code> should return a value of <code>-22</code>');",
        "assert(convert(-10) === 14, 'message: <code>convert(-10)</code> should return a value of <code>14</code>');",
        "assert(convert(0) === 32, 'message: <code>convert(0)</code> should return a value of <code>32</code>');",
        "assert(convert(20) === 68, 'message: <code>convert(20)</code> should return a value of <code>68</code>');",
        "assert(convert(30) === 86, 'message: <code>convert(30)</code> should return a value of <code>86</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c444eddfaeb5bdef",
      "title": "Declare String Variables",
      "description": [
        "先前我们使用过的代码",
        "<code>var myName = \"your name\";</code>",
        "<code>\"your name\"</code> 被称作 <dfn>字符串</dfn>。 这是一个字符串，因为它是用单或双引号包裹起来的一系列的零个或多个字符。",
        "<h4>Instructions</h4>",
        "创建两个新的 <code>字符串</code> 变量：<code>myFirstName</code> 和 <code>myLastName</code> 分别为它们赋上您的姓和名的值。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstName = \"Alan\";",
        "var lastName = \"Turing\";",
        "",
        "// Only change code below this line",
        "",
        "",
        ""
      ],
      "tail": [
        "if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}"
      ],
      "solutions": [
        "var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"
      ],
      "tests": [
        "assert((function(){if(typeof myFirstName !== \"undefined\" && typeof myFirstName === \"string\" && myFirstName.length > 0){return true;}else{return false;}})(), 'message: <code>myFirstName</code> should be a string with at least one character in it.');",
        "assert((function(){if(typeof myLastName !== \"undefined\" && typeof myLastName === \"string\" && myLastName.length > 0){return true;}else{return false;}})(), 'message: <code>myLastName</code> should be a string with at least one character in it.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b5",
      "title": "Escaping Literal Quotes in Strings",
      "description": [
        "当您定义一个字符串必须要用并用单或双引号来包裹它。当您需要在您的字符串中使用一个: <code>\"</code> 或者 <code>'</code> 会发生什么?",
        "在 JavaScript 中，您可以通过在引号前面使用 <dfn>反斜杠</dfn> (<code>\\</code>) 来转义引号。",
        "<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>",
        "这标志着提醒 JavaScript 下列引号并不是字符串的结尾，而应该是出现在字符串内的字符。所以，如果你要打印这个到控制台，您将得到：",
        "<code>Alan said, \"Peter is learning JavaScript\".</code>",
        "<h4>Instruction</h4>",
        "使用 <dfn>反斜杠</dfn> 将一个字符串赋值给变量 <code>myStr</code>，以便如果你要打印到控制台，你会看到：",
        "<code>I am a \"double quoted\" string inside \"double quotes\"</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr; // Change this line",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return \"myStr = \" + myStr;",
        "  } else {",
        "    return \"myStr is undefined\";",
        "  }",
        "})();"
      ],
      "solutions": [
        "var myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\"\";"
      ],
      "tests": [
        "assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2, 'message: You should use two double quotes (<code>&quot;</code>) and four escaped double quotes (<code>&#92;&quot;</code>) ');",
        "assert(myStr === \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\"\", 'message: Variable myStr should equal to (<code>\"I am a \"double quoted\" string inside \"double quotes\"\"</code>).');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b4",
      "title": "Quoting Strings with Single Quotes",
      "description": [
        "在 JavaScript 中的 <dfn>字符串</dfn> 值可以用单或双引号写，只要你在开始和结束都使用相同类型的引号。不像某些语言，单引号和双引号在功能上是在JavaScript中是相同的。",
        "<code>\"This string has \\\"double quotes\\\" in it\"</code>",
        "当使用的值与引号具有相同的类型的时候我们需要对它进行 <dfn>转义</dfn> 。如果你有很多双引号的字符串，使用转义字符这可能导致难以阅读和写字。相反地，可以使用单引号:",
        "<code>'This string has \"double quotes\" in it. And \"probably\" lots of them.'</code>",
        "<h4>Instructions</h4>",
        "更改 provided 字符串的双引号为单引号，并移除转义符号。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";",
        "",
        ""
      ],
      "tail": [
        "(function() { return \"myStr = \" + myStr; })();"
      ],
      "solutions": [
        "var myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"
      ],
      "tests": [
        "assert(!/\\\\/g.test(code), 'message: Remove all the <code>backslashes</code> (<code>\\</code>)');",
        "assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2, 'message: You should have two single quotes <code>&#39;</code> and four double quotes <code>&quot;</code>');",
        "assert(myStr === '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>', 'message: Only remove the backslashes <code>\\</code> used to escape quotes.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b6",
      "title": "Escape Sequences in Strings",
      "description": [
        "引号不是唯一可以在字符串中唯一一个被转义的字符。下面是常见的转义序列的表:",
        "<table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td>\\'</td><td>单引号</td></tr><tr><td>\\\"</td><td>双引号</td></tr><tr><td>\\\\</td><td>反斜杠符</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车符</td></tr><tr><td>\\t</td><td>制表符</td></tr><tr><td>\\b</td><td>退格符</td></tr><tr><td>\\f</td><td>换页符</td></tr></tbody></table>",
        "<em>注意，如果您想要显示一个反斜杠就必须要转义它。</em>",
        "<h4>Instructions</h4>",
        "按照下面的顺序编码序列，并且用空格来分割开：<br><code>反斜杠 制表符 制表符 回车符 换行符</code> 并把它赋值给变量 <code>myStr</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myStr; // Change this line",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "if (myStr !== undefined){",
        "return 'myStr = '+ JSON.stringify(myStr);}",
        "else{return null;}})();"
      ],
      "solutions": [
        "var myStr = \"\\\\ \\t \\t \\r \\n\";"
      ],
      "tests": [
        "assert(myStr === \"\\\\ \\t \\t \\r \\n\", 'message: <code>myStr</code> should have the escape sequences for <code>backslash tab tab carriage-return new-line</code> separated by spaces');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b7",
      "title": "Concatenating Strings with Plus Operator",
      "description": [
        "在 JavaScript 中，当 <code>+</code> 操作符与 <code>字符串</code> 一起使用的时候，它被称作 <dfn>连接</dfn> 操作符。您可以通过和其他字符串<dfn>连接</dfn> 来创建一个新的字符串。",
        "<strong>举个例子</strong>",
        "<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>",
        "<strong>注意</strong><br>当心空格。连接操作不会添加上两个字符串之间外面的空格，所以如果想要加上空格的话，您需要自己在字符串上面添加。",
        "<h4>Instructions</h4>",
        "使用 <code>+</code> 操作，把字符串 <code>\"This is the start. \"</code> 和 <code>\"This is the end.\"</code> 连接起来并赋值给变量 <code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var ourStr = \"I come first. \" + \"I come second.\";",
        "",
        "// Only change code below this line",
        "",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return 'myStr = \"' + myStr + '\"';",
        "  } else {",
        "    return 'myStr is not a string';",
        "  }",
        "})();"
      ],
      "solutions": [
        "var ourStr = \"I come first. \" + \"I come second.\";\nvar myStr = \"This is the start. \" + \"This is the end.\";"
      ],
      "tests": [
        "assert(myStr === \"This is the start. This is the end.\", 'message: <code>myStr</code> should have a value of <code>This is the start. This is the end.</code>');",
        "assert(code.match(/([\"']).*([\"'])\\s*\\+\\s*([\"']).*([\"'])/g).length > 1, 'message: Use the <code>+</code> operator to build <code>myStr</code>');",
        "assert(/var\\s+myStr/.test(code), 'message: <code>myStr</code> should be created using the <code>var</code> keyword.');",
        "assert(/myStr\\s*=/.test(code), 'message: Make sure to assign the result to the <code>myStr</code> variable.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b8",
      "title": "Concatenating Strings with the Plus Equals Operator",
      "description": [
        "我们还可以使用 <code>+=</code> 运算符来 <dfn>连接</dfn> 字符串到现有的字符串变量的结尾。对于那些需要占用几行的长字符串来说，这一操作是非常有用的。",
        "<strong>注意</strong><br>当心空格。连接操作不会添加上两个字符串之间外面的空格，所以如果想要加上空格的话，您需要自己在字符串上面添加。",
        "<h4>Instructions</h4>",
        "通过使用 <code>+=</code> 操作符来连接这两个字符串:<br><code>\"This is the first sentence. \"</code> 和 <code>\"This is the second sentence.\"</code> 来构建变量 <code>myStr</code>。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var ourStr = \"I come first. \";",
        "ourStr += \"I come second.\";",
        "",
        "// Only change code below this line",
        "",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  if(typeof myStr === 'string') {",
        "    return 'myStr = \"' + myStr + '\"';",
        "  } else {",
        "    return 'myStr is not a string';",
        "  }",
        "})();"
      ],
      "solutions": [
        "var ourStr = \"I come first. \";\nourStr += \"I come second.\";\n\nvar myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
      ],
      "tests": [
        "assert(myStr === \"This is the first sentence. This is the second sentence.\", 'message: <code>myStr</code> should have a value of <code>This is the first sentence. This is the second sentence.</code>');",
        "assert(code.match(/\\w\\s*\\+=\\s*[\"']/g).length > 1 && code.match(/\\w\\s*\\=\\s*[\"']/g).length > 1, 'message: Use the <code>+=</code> operator to build <code>myStr</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244b9",
      "title": "Constructing Strings with Variables",
      "description": [
        "有时候您需要创建一个 <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs（填字）</a> 风格的字符串。通过使用连接运算符（<code> + </ code>），您可以插入一个或多个变量来建立一个字符串。",
        "<h4>Instructions</h4>",
        "把您的名字赋值给变量 <code>myName</code> ，然后把变量 <code>myName</code> 插入到字符串 <code>\"My name is \"</code> 和 <code>\" and I am swell!\"</code>之间，并把得到的新字符串赋值给变量 <code>myStr</code> "
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var ourName = \"Free Code Camp\";",
        "var ourStr = \"Hello, our name is \" + ourName + \", how are you?\";",
        "",
        "// Only change code below this line",
        "var myName;",
        "var myStr;",
        "",
        ""
      ],
      "tail": [
        "(function(){",
        "  var output = [];",
        "  if(typeof myName === 'string') {",
        "    output.push('myName = \"' + myName + '\"');",
        "  } else {",
        "    output.push('myName is not a string');",
        "  }",
        "  if(typeof myStr === 'string') {",
        "    output.push('myStr = \"' + myStr + '\"');",
        "  } else {",
        "    output.push('myStr is not a string');",
        "  }",
        "  return output.join('\\n');",
        "})();"
      ],
      "solutions": [
        "var myName = \"Bob\";\nvar myStr = \"My name is \" + myName + \" and I am swell!\";"
      ],
      "tests": [
        "assert(typeof myName !== 'undefined' && myName.length > 2, 'message: <code>myName</code> should be set to a string at least 3 characters long');",
        "assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0, 'message: Use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ed",
      "title": "Appending Variables to Strings",
      "description": [
        "正如我们可以创建出多行的字符串，我们还可以使用加等号(<code>+=</code>)运算符来追加变量到字符串上。",
        "<h4>Instructions</h4>",
        "设置变量 <code>someAdjective</code> 的值，并使用 <code>+=</code> 运算符把它追加到变量 <code>myStr</code> 上。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var anAdjective = \"awesome!\";",
        "var ourStr = \"Free Code Camp is \";",
        "ourStr += anAdjective;",
        "",
        "// Only change code below this line",
        "",
        "var someAdjective;",
        "var myStr = \"Learning to code is \";",
        ""
      ],
      "tail": [
        "(function(){",
        "  var output = [];",
        "  if(typeof someAdjective === 'string') {",
        "    output.push('someAdjective = \"' + someAdjective + '\"');",
        "  } else {",
        "    output.push('someAdjective is not a string');",
        "  }",
        "  if(typeof myStr === 'string') {",
        "    output.push('myStr = \"' + myStr + '\"');",
        "  } else {",
        "    output.push('myStr is not a string');",
        "  }",
        "  return output.join('\\n');",
        "})();"
      ],
      "solutions": [
        "var anAdjective = \"awesome!\";\nvar ourStr = \"Free Code Camp is \";\nourStr += anAdjective;\n\nvar someAdjective = \"neat\";\nvar myStr = \"Learning to code is \";\nmyStr += someAdjective;"
      ],
      "tests": [
        "assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2, 'message: <code>someAdjective</code> should be set to a string at least 3 characters long');",
        "assert(code.match(/\\w\\s*\\+=\\s*someAdjective\\s*;/).length > 0, 'message: Append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c448eddfaeb5bdef",
      "title": "Find the Length of a String",
      "description": [
        "您可以通过字符串变量或字符串后面写 <code>.length</code> 来得到 <code>字符串</code> 值的长度。",
        "<code>\"Alan Peter\".length; // 10</code>",
        "例如，我们创建了一个变量 <code>var firstName = \"Charles\"</code>，我们就可以通过使用 <code>firstName.length</code> 属性来得到 <code>\"Charles\"</code> 字符串的长度。",
        "<h4>Instructions</h4>",
        "使用 <code>.length</code> 属性来得到变量 <code>lastName</code> 的长度，并把它赋值给变量 <code>lastNameLength</code>。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstNameLength = 0;",
        "var firstName = \"Ada\";",
        "",
        "firstNameLength = firstName.length;",
        "",
        "// Setup",
        "var lastNameLength = 0;",
        "var lastName = \"Lovelace\";",
        "",
        "// Only change code below this line.",
        "",
        "lastNameLength = lastName;",
        "",
        ""
      ],
      "tail": [
        "if(typeof lastNameLength !== \"undefined\"){(function(){return lastNameLength;})();}"
      ],
      "solutions": [
        "var firstNameLength = 0;\nvar firstName = \"Ada\";\nfirstNameLength = firstName.length;\n\nvar lastNameLength = 0;\nvar lastName = \"Lovelace\";\nlastNameLength = lastName.length;"
      ],
      "tests": [
        "assert((function(){if(typeof lastNameLength !== \"undefined\" && typeof lastNameLength === \"number\" && lastNameLength === 8){return true;}else{return false;}})(), 'message: <code>lastNameLength</code> should be equal to eight.');",
        "assert((function(){if(code.match(/\\.length/gi) && code.match(/\\.length/gi).length >= 2 && code.match(/var lastNameLength \\= 0;/gi) && code.match(/var lastNameLength \\= 0;/gi).length >= 1){return true;}else{return false;}})(), 'message: You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c549eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the First Character in a String",
      "description": [
        "<code>括号标记符号</code> 是一种能够在字符串中通过指定 <code>索引</code> 来获得相应的字符的操作。",
        "大多数现代编程语言，如JavaScript，不像人类那样是从1开始计数的。他们从0开始。这被称为 <dfn>基于零</dfn> 的索引。",
        "例如, 在单词 \"Charles\" 中索引0上的字符为 \"C\". 所以在 <code>var firstName = \"Charles\"</code> 中，你可以使用 <code>firstName[0]</code> 来获得第一个位置上的字符。",
        "<h4>Instructions</h4>",
        "使用 <dfn>括号标记符号</dfn> 来得到变量 <code>lastName</code> 中的第一个字符，并赋值给变量 <code>firstLetterOfLastName</code> 。",
        "<strong>提示</strong><br>如果你卡住了，不妨查看在变量 <code>firstLetterOfFirstName</code> 上是如何声明的。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstLetterOfFirstName = \"\";",
        "var firstName = \"Ada\";",
        "",
        "firstLetterOfFirstName = firstName[0];",
        "",
        "// Setup",
        "var firstLetterOfLastName = \"\";",
        "var lastName = \"Lovelace\";",
        "",
        "// Only change code below this line",
        "firstLetterOfLastName = lastName;",
        ""
      ],
      "tail": [
        "(function(v){return v;})(firstLetterOfLastName);"
      ],
      "solutions": [
        "var firstLetterOfLastName = \"\";\nvar lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];"
      ],
      "tests": [
        "assert(firstLetterOfLastName === 'L', 'message: The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.');",
        "assert(code.match(/firstLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d+\\s*\\]/), 'message: You should use bracket notation.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ba",
      "title": "Understand String Immutability",
      "description": [
        "在 JavaScript 中，<code>字符串</code> 的值是 <dfn>不可变的</dfn>，这意味着一旦字符串被创建就不能被改变。",
        "例如，下面的代码：",
        "<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>",
        "是不能把变量 <code>myStr</code> 的值改变成 \"Job\" 的，因为变量 <code>myStr</code> 中的内容是不可变的。注意，这 <em>并不</em> 意味着 <code>myStr</code> 中不能被改变，只是一个 <dfn>string literal</dfn> 的各个字符不能被改变。改变 <code>myStr</code> 中的唯一方法是用一个新的字符串分配给它，就像这样：",
        "<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>",
        "<h4>Instructions</h4>",
        "纠正 <code>myStr</code> 的赋值以达到期望的效果。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var myStr = \"Jello World\";",
        "",
        "// Only change code below this line",
        "",
        "myStr[0] = \"H\"; // Fix Me",
        "",
        ""
      ],
      "tail": [
        "(function(v){return \"myStr = \" + v;})(myStr);"
      ],
      "solutions": [
        "var myStr = \"Jello World\";\nmyStr = \"Hello World\";"
      ],
      "tests": [
        "assert(myStr === \"Hello World\", 'message: <code>myStr</code> should have a value of <code>Hello World</code>');",
        "assert(/myStr = \"Jello World\"/.test(code), 'message: Do not change the code above the line');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c450eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth Character in a String",
      "description": [
        "您也可以使用 <dfn>括号标记符号</dfn> 来获得一个字符串中的其他位置的字符。",
        "请记住，程序是从 <code>0</code> 开始计数，所以第一个字符实际上是零字符。",
        "<h4>Instructions</h4>",
        "让我们使用括号标记符号，把 <code>lastName</code> 变量的第三个字符赋值给 <code>thirdLetterOfLastName</code>。",
        "<strong>提示</strong><br>如果你卡住了，看看 <code>secondLetterOfFirstName</code> 变量是如何做的。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstName = \"Ada\";",
        "var secondLetterOfFirstName = firstName[1];",
        "",
        "// Setup",
        "var lastName = \"Lovelace\";",
        "",
        "// Only change code below this line.",
        "var thirdLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(thirdLetterOfLastName);"
      ],
      "solutions": [
        "var lastName = \"Lovelace\";\nvar thirdLetterOfLastName = lastName[2];"
      ],
      "tests": [
        "assert(thirdLetterOfLastName === 'v', 'message: The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.');",
        "assert(code.match(/thirdLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d+\\s*\\]/), 'message: You should use bracket notation.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c451eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Last Character in a String",
      "description": [
        "为了得到一个字符串的最后一个字符，您可以用字符串的长度减去一。",
        "例如，在 <code>var firstName = \"Charles\"</code> 中，您可以这样操作 <code>firstName[firstName.length - 1]</code> 来得到字符串的最后的一个字符。",
        "<h4>Instructions</h4>",
        "使用 <dfn>括号标记符号</dfn> 来取得 <code>lastName</code> 变量中的最后一个字符。",
        "<strong>提示</strong><br>如果你卡住了，不妨看看在 <code>lastLetterOfFirstName</code> 变量上是怎么做的。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstName = \"Ada\";",
        "var lastLetterOfFirstName = firstName[firstName.length - 1];",
        "",
        "// Setup",
        "var lastName = \"Lovelace\";",
        "",
        "// Only change code below this line.",
        "var lastLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(lastLetterOfLastName);"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar lastLetterOfFirstName = firstName[firstName.length - 1];\n\nvar lastName = \"Lovelace\";\nvar lastLetterOfLastName = lastName[lastName.length - 1];"
      ],
      "tests": [
        "assert(lastLetterOfLastName === \"e\", 'message: <code>lastLetterOfLastName</code> should be \"e\".');",
        "assert(code.match(/\\.length/g).length === 2, 'message: You have to use <code>.length</code> to get the last letter.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c452eddfaeb5bdef",
      "title": "Use Bracket Notation to Find the Nth-to-Last Character in a String",
      "description": [
        "我们用于检索获取最后一个字符的字符串的原则，同样的，也可以用这套原则来检索获取第N个到最后一个字符。",
        "例如，您可以这样 <code>firstName[firstName.length - 3]</code> 操作来获得 <code>var firstName = \"Charles\"</code> 字符串中的倒数第三个字符。",
        "<h4>Instructions</h4>",
        "使用 <dfn>括号标记符号</dfn> 来获得 <code>lastName</code> 字符串中的倒数第二个字符。",
        "<strong>提示</strong><br>如果你卡住了，不妨看看 <code>thirdToLastLetterOfFirstName</code> 变量是如何声明操作的。"
      ],
      "challengeSeed": [
        "// Example",
        "var firstName = \"Ada\";",
        "var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];",
        "",
        "// Setup",
        "var lastName = \"Lovelace\";",
        "",
        "// Only change code below this line",
        "var secondToLastLetterOfLastName = lastName;",
        "",
        ""
      ],
      "tail": [
        "(function(v){return v;})(secondToLastLetterOfLastName);"
      ],
      "solutions": [
        "var firstName = \"Ada\";\nvar thirdToLastLetterOfFirstName = firstName[firstName.length - 3];\n\nvar lastName = \"Lovelace\";\nvar secondToLastLetterOfLastName = lastName[lastName.length - 2];"
      ],
      "tests": [
        "assert(secondToLastLetterOfLastName === 'c', 'message: <code>secondToLastLetterOfLastName</code> should be \"c\".');",
        "assert(code.match(/\\.length/g).length === 2, 'message: You have to use <code>.length</code> to get the second last letter.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bb",
      "title": "Word Blanks",
      "description": [
        "现在我们将使用我们的字符串的知识，建立一个\"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>填字</a>\"风格的文字游戏，我们称之为“单词空白”。您将创建一个（可选的）“在空白填充”样式的句子。“",
        "通过使用提供的变量：<code>myNoun</code>，<code>myAdjective</code>，<code>myVerb</code>，和 <code>myAdverb</code>，来创建一个新的字符串 <code>result</code>。",
        "此外，在所提供的词之间，您还需要提供额外的字符串。",
        "我们提供了对不同单词得到的结果进行测试的框架。该测试将用多个不同的输入来运行你的函数，以确保所有的提供的单词，以及你的额外字符串能够输出。"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {",
        "  var result = \"\";",
        "  // Your code below this line",
        "  ",
        "",
        "  // Your code above this line",
        "  return result;",
        "}",
        "",
        "// Change the words here to test your function",
        "wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");"
      ],
      "tail": [
        "var test1 = wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\");",
        "var test2 = wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\");"
      ],
      "solutions": [
        "function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n  var result = \"\";\n\n  result = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\n  result += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";\n\n  return result;\n}"
      ],
      "tests": [
        "assert(typeof wordBlanks(\"\",\"\",\"\",\"\") === 'string', 'message: <code>wordBlanks(\"\",\"\",\"\",\"\")</code> should return a string.');",
        "assert(/\\bdog\\b/.test(test1) && /\\bbig\\b/.test(test1) && /\\bran\\b/.test(test1) && /\\bquickly\\b/.test(test1),'message: <code>wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\")</code> should contain all of the passed words separated by non-word characters (and any additional words in your madlib).');",
        "assert(/\\bcat\\b/.test(test2) && /\\blittle\\b/.test(test2) && /\\bhit\\b/.test(test2) && /\\bslowly\\b/.test(test2),'message: <code>wordBlanks(\"cat\", \"little\", \"hit\", \"slowly\")</code> should contain all of the passed words separated by non-word characters (and any additional words in your madlib).');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7993c9c69feddfaeb8bdef",
      "title": "Store Multiple Values in one Variable using JavaScript Arrays",
      "description": [
        "使用 JavaScript <code>数组</code> 变量，我们可以在同一个地方存储多项数据。",
        "你以左方括号开始声明一个数组，以右方括号结束它，并把每个条目之间用逗号隔开，就像这样：<br><code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>。",
        "<h4>Instructions</h4>",
        "创建一个包含一个 <code>字符串</code> 和一个 <code>数字</code> 的数组 <code>myArray</code>。",
        "<strong>提示</strong><br>如果你卡住，请参考文本编辑器中的示例代码。"
      ],
      "challengeSeed": [
        "// Example",
        "var array = [\"John\", 23];",
        "",
        "// Only change code below this line.",
        "var myArray = [];",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myArray);"
      ],
      "solutions": [
        "var myArray = [\"The Answer\", 42];"
      ],
      "tests": [
        "assert(typeof myArray == 'object', 'message: <code>myArray</code> should be an <code>array</code>.');",
        "assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string', 'message: The first item in <code>myArray</code> should be a <code>string</code>.');",
        "assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number', 'message: The second item in <code>myArray</code> should be a <code>number</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb7bdef",
      "title": "Nest one Array within Another Array",
      "description": [
        "您也可以在数组中包含其他数组，就像这样: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>。这被称为一个 <dfn>多维数组<dfn>。",
        "<h4>Instructions</h4>",
        "创建一个多维数组命名为 <code>myArray</code>。"
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [[\"the universe\", 42], [\"everything\", 101010]];",
        "",
        "// Only change code below this line.",
        "var myArray = [];",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [[1,2,3]];"
      ],
      "tests": [
        "assert(Array.isArray(myArray) && myArray.some(Array.isArray), 'message: <code>myArray</code> should have at least one array nested within another array.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392ca",
      "title": "Access Array Data with Indexes",
      "description": [
        "我们可以通过数组索引来访问使用数组中的数据。",
        "数组索引的使用与字符串索引一样，不同的是，通过字符串的索引得到的是一个字符，通过数组索引得到的是一个条目。与字符串类似，数组也是 <dfn>基于零</dfn> 的索引，因此数组的第一个元素的索引是 <code>0</code>。",
        "<strong>例如</strong>",
        "<blockquote>var array = [1,2,3];<br>array[0]; // 等于 1<br>var data = array[1];  // 等于 2</blockquote>",
        "<h4>Instructions</h4>",
        "创建一个名为 <code>myData</code> 的变量，并把 <code>myArray</code> 的第一个索引上的值赋给它。"
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [1,2,3];",
        "var ourData = ourArray[0]; // equals 1",
        "",
        "// Setup",
        "var myArray = [1,2,3];",
        "",
        "// Only change code below this line.",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}"
      ],
      "solutions": [
        "var myArray = [1,2,3];\nvar myData = myArray[0];"
      ],
      "tests": [
        "assert((function(){if(typeof myArray != 'undefined' && typeof myData != 'undefined' && myArray[0] == myData){return true;}else{return false;}})(), 'message: The variable <code>myData</code> should equal the first value of <code>myArray</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb8bdef",
      "title": "Modify Array Data With Indexes",
      "description": [
        "不像字符串，数组的项（条目）是可变的，并且可以自由地改变。",
        "<strong>例如</strong>",
        "<blockquote>var ourArray = [3,2,1];<br>ourArray[0] = 1; // ourArray等于 [1,2,1]</blockquote>",
        "<h4>Instructions</h4>",
        "修改数值 <code>myArray</code> 中索引0上的值为 <code>3</code>。"
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [1,2,3];",
        "ourArray[1] = 3; // ourArray now equals [1,3,3].",
        "",
        "// Setup",
        "var myArray = [1,2,3];",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [1,2,3];\nmyArray[0] = 3;"
      ],
      "tests": [
        "assert((function(){if(typeof myArray != 'undefined' && myArray[0] == 3 && myArray[1] == 2 && myArray[2] == 3){return true;}else{return false;}})(), 'message: <code>myArray</code> should now be [3,2,3].');",
        "assert((function(){if(code.match(/myArray\\[0\\]\\s?=\\s?/g)){return true;}else{return false;}})(), 'message: You should be using correct index to modify the value in <code>myArray</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56592a60ddddeae28f7aa8e1",
      "title": "Access Multi-Dimensional Arrays With Indexes",
      "description": [
        "One way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of bracket refers to the entries in the outer-most array, and each subsequent level of brackets refers to the next level of entries inside.",
        "<strong>Example</strong>",
        "<blockquote>var arr = [<br>    [1,2,3],<br>    [4,5,6],<br>    [7,8,9],<br>    [[10,11,12], 13, 14]<br>];<br>arr[0]; // equals [1,2,3]<br>arr[1][2]; // equals 6<br>arr[3][0][1]; // equals 11</blockquote>",
        "<h4>Instructions</h4>",
        "Read from <code>myArray</code> using bracket notation so that myData is equal to <code>8</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];",
        "",
        "// Only change code below this line.",
        "var myData = myArray[0][0];",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}"
      ],
      "solutions": [
        "var myArray = [[1,2,3],[4,5,6], [7,8,9], [[10,11,12], 13, 14]];\nvar myData = myArray[2][1];"
      ],
      "tests": [
        "assert(myData === 8, 'message: <code>myData</code> should be equal to <code>8</code>.');",
        "assert(/myArray\\[2\\]\\[1\\]/g.test(code), 'message: You should be using bracket notation to read the value from <code>myArray</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cb",
      "title": "Manipulate Arrays With push()",
      "description": [
        "An easy way to append data to the end of an array is via the <code>push()</code> function.",
        "<code>.push()</code> takes one or more <dfn>parameter</dfn> and \"pushes\" it onto the end of the array.",
        "<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// arr is now [1,2,3,4]</blockquote>",
        "<h4>Instructions</h4>",
        "Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
        "ourArray.push([\"happy\", \"joy\"]); ",
        "// ourArray now equals [\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]",
        "",
        "// Setup",
        "var myArray = [[\"John\", 23], [\"cat\", 2]];",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
      ],
      "tests": [
        "assert((function(d){if(d[2] != undefined && d[0][0] == 'John' && d[0][1] == 23 && d[2][0] == 'dog' && d[2][1] == 3 && d[2].length == 2){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cc",
      "title": "Manipulate Arrays With pop()",
      "description": [
        "Another way to change the data in an array is with the <code>.pop()</code> function.",
        "<code>.pop()</code> is used to \"pop\" a value off of the end of an array. We can store this \"popped off\" value by assigning it to a variable.",
        "Any type of entry can be \"popped\" off of an array - numbers, strings, even nested arrays.",
        "For example, for the code<br><code>var oneDown = [1, 4, 6].pop();</code><br>the variable <code>oneDown</code> now holds the value <code>6</code> and the array becomes <code>[1, 4]</code>.",
        "<h4>Instructions</h4>",
        "Use the <code>.pop()</code> function to remove the last item from <code>myArray</code>, assigning the \"popped off\" value to <code>removedFromMyArray</code>."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [1,2,3];",
        "var removedFromOurArray = ourArray.pop(); ",
        "// removedFromOurArray now equals 3, and ourArray now equals [1,2]",
        "",
        "// Setup",
        "var myArray = [[\"John\", 23], [\"cat\", 2]];",
        "",
        "// Only change code below this line.",
        "var removedFromMyArray;",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"cat\", 2]];\nvar removedFromMyArray = myArray.pop();"
      ],
      "tests": [
        "assert((function(d){if(d[0][0] == 'John' && d[0][1] == 23 && d[2] == undefined){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.');",
        "assert((function(d){if(d[0] == 'cat' && d[1] == 2 && d[2] == undefined){return true;}else{return false;}})(removedFromMyArray), 'message: <code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cd",
      "title": "Manipulate Arrays With shift()",
      "description": [
        "<code>pop()</code> always removes the last element of an array. What if you want to remove the first?",
        "That's where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.",
        "<h4>Instructions</h4>",
        "Use the <code>.shift()</code> function to remove the first item from <code>myArray</code>, assigning the \"shifted off\" value to <code>removedFromMyArray</code>."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [\"Stimpson\", \"J\", [\"cat\"]];",
        "removedFromOurArray = ourArray.shift();",
        "// removedFromOurArray now equals \"Stimpson\" and ourArray now equals [\"J\", [\"cat\"]].",
        "",
        "// Setup",
        "var myArray = [[\"John\", 23], [\"dog\", 3]];",
        "",
        "// Only change code below this line.",
        "var removedFromMyArray;",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line.\nvar removedFromMyArray = myArray.shift();"
      ],
      "tests": [
        "assert((function(d){if(d[0][0] == 'dog' && d[0][1] == 3 && d[1] == undefined){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.');",
        "assert((function(d){if(d[0] === 'John' && d[1] === 23 && typeof removedFromMyArray === 'object'){return true;}else{return false;}})(removedFromMyArray), 'message: <code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392ce",
      "title": "Manipulate Arrays With unshift()",
      "description": [
        "Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.",
        "<code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.",
        "<h4>Instructions</h4>",
        "Add <code>[\"Paul\",35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [\"Stimpson\", \"J\", \"cat\"];",
        "ourArray.shift(); // ourArray now equals [\"J\", \"cat\"]",
        "ourArray.unshift(\"Happy\"); ",
        "// ourArray now equals [\"Happy\", \"J\", \"cat\"]",
        "",
        "// Setup",
        "var myArray = [[\"John\", 23], [\"dog\", 3]];",
        "myArray.shift();",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);"
      ],
      "solutions": [
        "var myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
      ],
      "tests": [
        "assert((function(d){if(typeof d[0] === \"object\" && d[0][0].toLowerCase() == 'paul' && d[0][1] == 35 && d[1][0] != undefined && d[1][0] == 'dog' && d[1][1] != undefined && d[1][1] == 3){return true;}else{return false;}})(myArray), 'message: <code>myArray</code> should now have [[\"Paul\", 35], [\"dog\", 3]].');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bc",
      "title": "Shopping List",
      "description": [
        "Create a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.",
        "The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.",
        "<code>[\"Chocolate Bar\", 15]</code>",
        "There should be at least 5 sub-arrays in the list."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myList = [];",
        "",
        ""
      ],
      "tail": [
        "var count = 0;",
        "var isArray = false;",
        "var hasString = false;",
        "var hasNumber = false;",
        "(function(list){",
        "  if(Array.isArray(myList)) {",
        "    isArray = true;",
        "    if(myList.length > 0) {",
        "      hasString = true;",
        "      hasNumber = true;",
        "      myList.forEach(function(elem) {",
        "        if(typeof elem[0] !== 'string') {",
        "          hasString = false;",
        "        }",
        "        if(typeof elem[1] !== 'number') {",
        "          hasNumber = false;",
        "        }",
        "      });",
        "    }",
        "    count = myList.length;",
        "    return JSON.stringify(myList);",
        "  } else {",
        "    return \"myList is not an array\";",
        "  }",
        "",
        "})(myList);"
      ],
      "solutions": [
        "var myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"
      ],
      "tests": [
        "assert(isArray, 'message: <code>myList</code> should be an array');",
        "assert(hasString, 'message: The first elements in each of your sub-arrays must all be strings');",
        "assert(hasNumber, 'message: The second elements in each of your sub-arrays must all be numbers');",
        "assert(count > 4, 'message: You must have at least 5 items in your list');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392cf",
      "title": "Write Reusable JavaScript with Functions",
      "description": [
        "In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.",
        "Here's an example of a function:",
        "<blockquote>function functionName() {<br>  console.log(\"Hello World\");<br>}</blockquote>",
        "You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this:",
        "<code>functionName();</code>",
        "Each time the function is called it will print out the message <code>\"Hello World\"</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.",
        "<h4>Instructions</h4>",
        "<ol><li>Create a function called <code>myFunction</code> which prints <code>\"Hi World\"</code> to the dev console.</li><li>Call the function.</li></ol>"
      ],
      "challengeSeed": [
        "// Example",
        "function ourFunction() {",
        "  console.log(\"Heyya, World\");",
        "}",
        "",
        "ourFunction();",
        "",
        "// Only change code below this line",
        "",
        ""
      ],
      "tail": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        if(message && message.trim) logOutput = message.trim();",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "if (typeof myFunction !== \"function\") { ",
        "  (function() { return \"myFunction is not defined\"; })();",
        "} else {",
        "  capture();",
        "  myFunction();  ",
        "  uncapture();",
        "  (function() { return logOutput || \"console.log never called\"; })();",
        "}"
      ],
      "solutions": [
        "function myFunction() {\n  console.log(\"Hi World\");\n}\nmyFunction();"
      ],
      "tests": [
        "assert(typeof myFunction === 'function', 'message: <code>myFunction</code> should be a function');",
        "assert(\"Hi World\" === logOutput, 'message: <code>myFunction</code> should output \"Hi World\" to the dev console');",
        "assert(/^\\s*myFunction\\(\\)\\s*;/m.test(code), 'message: Call <code>myFunction</code> after you define it');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bd",
      "title": "Passing Values to Functions with Arguments",
      "description": [
        "<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.",
        "Here is a function with two parameters, <code>param1</code> and <code>param2</code>:",
        "<blockquote>function testFun(param1, param2) {<br>  console.log(param1, param2);<br>}</blockquote>",
        "Then we can call <code>testFun</code>:",
        "<code>testFun(\"Hello\", \"World\");</code>",
        "We have passed two arguments, <code>\"Hello\"</code> and <code>\"World\"</code>. Inside the function, <code>param1</code> will equal \"Hello\" and <code>param2</code> will equal \"World\". Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.",
        "<h4>Instructions</h4>",
        "<ol><li>Create a function called <code>myFunction</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function.</li></ol>"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        if(message) logOutput = JSON.stringify(message).trim();",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "capture();"
      ],
      "challengeSeed": [
        "// Example",
        "function ourFunction(a, b) {",
        "  console.log(a - b);",
        "}",
        "ourFunction(10, 5); // Outputs 5",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "uncapture();",
        "",
        "if (typeof myFunction !== \"function\") { ",
        "  (function() { return \"myFunction is not defined\"; })();",
        "} else {",
        "  (function() { return logOutput || \"console.log never called\"; })();",
        "}"
      ],
      "solutions": [
        "function myFunction(a, b) {\n  console.log(a + b);\n}\nmyFunction(10, 5);"
      ],
      "tests": [
        "assert(typeof myFunction === 'function', 'message: <code>myFunction</code> should be a function');",
        "if(typeof myFunction === \"function\") { capture(); myFunction(1,2); uncapture(); } assert(logOutput == 3, 'message: <code>myFunction(1,2)</code> should output <code>3</code>');",
        "if(typeof myFunction === \"function\") { capture(); myFunction(7,9); uncapture(); } assert(logOutput == 16, 'message: <code>myFunction(7,9)</code> should output <code>16</code>');",
        "assert(/^\\s*myFunction\\s*\\([\\w\\W]+\\)\\s*;/m.test(code), 'message: Call <code>myFunction</code> after you define it.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244be",
      "title": "Global Scope and Functions",
      "description": [
        "In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.",
        "Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.",
        "<h4>Instructions</h4>",
        "Declare a <code>global</code> variable <code>myGlobal</code> outside of any function. Initialize it to have a value of <code>10</code> ",
        "Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <strong><em>without</em></strong> using the <code>var</code> keyword."
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput = message;",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "var oopsGlobal;",
        "capture();"
      ],
      "challengeSeed": [
        "// Declare your variable here",
        "",
        "",
        "function fun1() {",
        "  // Assign 5 to oopsGlobal Here",
        "  ",
        "}",
        "",
        "// Only change code above this line",
        "function fun2() {",
        "  var output = \"\";",
        "  if (typeof myGlobal != \"undefined\") {",
        "    output += \"myGlobal: \" + myGlobal;",
        "  }",
        "  if (typeof oopsGlobal != \"undefined\") {",
        "    output += \" oopsGlobal: \" + oopsGlobal;",
        "  }",
        "  console.log(output);",
        "}"
      ],
      "tail": [
        "fun1();",
        "fun2();",
        "uncapture();",
        "(function() { return logOutput || \"console.log never called\"; })();"
      ],
      "solutions": [
        "// Declare your variable here\nvar myGlobal = 10;\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal Here\n  oopsGlobal = 5;\n}\n\n// Only change code above this line\nfunction fun2() {\n  var output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
      ],
      "tests": [
        "assert(typeof myGlobal != \"undefined\", 'message: <code>myGlobal</code> should be defined');",
        "assert(myGlobal === 10, 'message: <code>myGlobal</code> should have a value of <code>10</code>');",
        "assert(/var\\s+myGlobal/.test(code), 'message: <code>myGlobal</code> should be declared using the <code>var</code> keyword');",
        "assert(typeof oopsGlobal != \"undefined\" && oopsGlobal === 5, 'message: <code>oopsGlobal</code> should have a value of <code>5</code>');",
        "assert(!/var\\s+oopsGlobal/.test(code), 'message: Do not declare <code>oopsGlobal</code> using the <code>var</code> keyword');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244bf",
      "title": "Local Scope and Functions",
      "description": [
        "Variables which are declared within a function, as well as the function parameters have <dfn>local</dfn> scope. That means, they are only visible within that function.",
        "Here is a function <code>myTest</code> with a local variable called <code>loc</code>.",
        "<blockquote>function myTest() {<br>  var loc = \"foo\";<br>  console.log(loc);<br>}<br>myTest(); // \"foo\"<br>console.log(loc); // \"undefined\"</blockquote>",
        "<code>loc</code> is not defined outside of the function.",
        "<h4>Instructions</h4>",
        "Declare a local variable <code>myVar</code> inside <code>myFunction</code>"
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = \"\";",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput = message;",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        ""
      ],
      "challengeSeed": [
        "function myFunction() {",
        "  'use strict';",
        "  ",
        "  ",
        "  console.log(myVar);",
        "}",
        "myFunction();",
        "",
        "// run and check the console ",
        "// myVar is not defined outside of myFunction",
        "console.log(myVar);",
        "",
        "// now remove the console log line to pass the test",
        ""
      ],
      "tail": [
        "typeof myFunction === 'function' && (capture(), myFunction(), uncapture());",
        "(function() { return logOutput || \"console.log never called\"; })();"
      ],
      "solutions": [
        "function myFunction() {\n  'use strict';\n  \n  var myVar;\n  console.log(myVar);\n}\nmyFunction();"
      ],
      "tests": [
        "assert(typeof myVar === 'undefined', 'message: No global <code>myVar</code> variable');",
        "assert(/var\\s+myVar/.test(code), 'message: Add a local <code>myVar</code> variable');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c0",
      "title": "Global vs. Local Scope in Functions",
      "description": [
        "It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the <code>local</code> variable takes precedence over the <code>global</code> variable.",
        "In this example:",
        "<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>  var someVar = \"Head\";<br>  return someVar;<br>}</blockquote>",
        "The function <code>myFun</code> will return <code>\"Head\"</code> because the <code>local</code> version of the variable is present.",
        "<h4>Instructions</h4>",
        "Add a local variable to <code>myFunction</code> to override the value of <code>outerWear</code> with <code>\"sweater\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var outerWear = \"T-Shirt\";",
        "",
        "function myFunction() {",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line",
        "  return outerWear;",
        "}",
        "",
        "myFunction();"
      ],
      "solutions": [
        "var outerWear = \"T-Shirt\";\nfunction myFunction() {\n  var outerWear = \"sweater\";\n  return outerWear;\n}"
      ],
      "tests": [
        "assert(outerWear === \"T-Shirt\", 'message: Do not change the value of the global <code>outerWear</code>');",
        "assert(myFunction() === \"sweater\", 'message: <code>myFunction</code> should return <code>\"sweater\"</code>');",
        "assert(/return outerWear/.test(code), 'message: Do not change the return statement');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c2",
      "title": "Return a Value from a Function with Return",
      "description": [
        "We can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.",
        "<strong>Example</strong>",
        "<blockquote>function plusThree(num) {<br>  return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>",
        "<code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.",
        "<h4>Instructions</h4>",
        "Create a function <code>timesFive</code> that accepts one argument, multiplies it by <code>5</code>, and returns the new value."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "function minusSeven(num) {",
        "  return num - 7;",
        "}",
        "",
        "// Only change code below this line",
        "",
        ""
      ],
      "tail": [
        "(function() { if(typeof timesFive === 'function'){ return \"timesfive(5) === \" + timesFive(5); } else { return \"timesFive is not a function\"} })();"
      ],
      "solutions": [
        "function timesFive(num) {\n  return num * 5;\n}"
      ],
      "tests": [
        "assert(typeof timesFive === 'function', 'message: <code>timesFive</code> should be a function');",
        "assert(timesFive(5) === 25, 'message: <code>timesFive(5)</code> should return <code>25</code>');",
        "assert(timesFive(2) === 10, 'message: <code>timesFive(2)</code> should return <code>10</code>');",
        "assert(timesFive(0) === 0, 'message: <code>timesFive(0)</code> should return <code>0</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c3",
      "title": "Assignment with a Returned Value",
      "description": [
        "If you'll recall from our discussion of <a href=\"waypoint-storing-values-with-the-equal-operator\" target=\"_blank\">Storing Values with the Equal Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.",
        "Assume we have pre-defined a function <code>sum</code> which adds two numbers together, then: ",
        "<code>ourSum = sum(5, 12);</code>",
        "will call <code>sum</code> function, which returns a value of <code>17</code> and assigns it to <code>ourSum</code> variable.",
        "<h4>Instructions</h4>",
        "Call the <code>process</code> function with an argument of <code>7</code> and assign its return value to the variable <code>processed</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var changed = 0;",
        "",
        "function change(num) {",
        "  return (num + 5) / 3;",
        "}",
        "",
        "changed = change(10);",
        "",
        "// Setup",
        "var processed = 0;",
        "",
        "function process(num) {",
        "  return (num + 3) / 5;",
        "}",
        "",
        "// Only change code below this line",
        "",
        ""
      ],
      "tail": [
        "(function(){return \"processed = \" + processed})();"
      ],
      "solutions": [
        "var processed = 0;\n\nfunction process(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = process(7);"
      ],
      "tests": [
        "assert(processed === 2, 'message: <code>processed</code> should have a value of <code>2</code>');",
        "assert(/processed\\s*=\\s*process\\(\\s*7\\s*\\)\\s*;/.test(code), 'message: You should assign <code>process</code> to <code>processed</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c6",
      "title": "Stand in Line",
      "description": [
        "In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the <code>queue</code> and old items are taken off from the front of the <code>queue</code>.",
        "Write a function <code>queue</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments. Add the number to the end of the array, then remove the first element of array. The queue function should then return the element that was removed."
      ],
      "releasedOn": "January 1, 2016",
      "head": [
        "var logOutput = [];",
        "var originalConsole = console",
        "function capture() {",
        "    var nativeLog = console.log;",
        "    console.log = function (message) {",
        "        logOutput.push(message);",
        "        if(nativeLog.apply) {",
        "          nativeLog.apply(originalConsole, arguments);",
        "        } else {",
        "          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');",
        "          nativeLog(nativeMsg);",
        "        }",
        "    };",
        "}",
        "",
        "function uncapture() {",
        "  console.log = originalConsole.log;",
        "}",
        "",
        "capture();"
      ],
      "challengeSeed": [
        "function queue(arr, item) {",
        "  // Your code here",
        "  ",
        "  return item;  // Change this line",
        "}",
        "",
        "// Test Setup",
        "var testArr = [1,2,3,4,5];",
        "",
        "// Display Code",
        "console.log(\"Before: \" + JSON.stringify(testArr));",
        "console.log(queue(testArr, 6)); // Modify this line to test",
        "console.log(\"After: \" + JSON.stringify(testArr));"
      ],
      "tail": [
        "uncapture();",
        "testArr = [1,2,3,4,5];",
        "(function() { return logOutput.join(\"\\n\");})();"
      ],
      "solutions": [
        "var testArr = [ 1,2,3,4,5];\n\nfunction queue(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"
      ],
      "tests": [
        "assert(queue([],1) === 1, 'message: <code>queue([], 1)</code> should return <code>1</code>');",
        "assert(queue([2],1) === 2, 'message: <code>queue([2], 1)</code> should return <code>2</code>');",
        "assert(queue([5,6,7,8,9],1) === 5, 'message: <code>queue([5,6,7,8,9], 1)</code> should return <code>5</code>');",
        "queue(testArr, 10); assert(testArr[4] === 10, 'message: After <code>queue(testArr, 10)</code>, <code>myArr[4]</code> should be <code>10</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "bd7123c9c441eddfaeb5bdef",
      "title": "Understanding Boolean Values",
      "description": [
        "Another data type is the <dfn>Boolean</dfn>. <code>Booleans</code> may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is \"on\" and <code>false</code> is \"off.\"  These two states are mutually exclusive.",
        "<strong>Note</strong><br><code>Boolean</code> values are never written with quotes. The <code>strings</code> <code>\"true\"</code> and <code>\"false\"</code> are not <code>Boolean</code> and have no special meaning in JavaScript.",
        "<h4>Instructions</h4>",
        "Modify the <code>welcomeToBooleans</code> function so that it returns <code>true</code> instead of <code>false</code> when the run button is clicked."
      ],
      "challengeSeed": [
        "function welcomeToBooleans() {",
        "",
        "// Only change code below this line.",
        "",
        "return false; // Change this line",
        "",
        "// Only change code above this line.",
        "}"
      ],
      "tail": [
        "welcomeToBooleans();"
      ],
      "solutions": [
        "function welcomeToBooleans() {\n  return true; // Change this line\n}"
      ],
      "tests": [
        "assert(typeof welcomeToBooleans() === 'boolean', 'message: The <code>welcomeToBooleans()</code> function should return a boolean &#40;true/false&#41; value.');",
        "assert(welcomeToBooleans() === true, 'message: <code>welcomeToBooleans()</code> should return true.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb3bdef",
      "title": "Use Conditional Logic with If Statements",
      "description": [
        "<code>If</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions because they may only be <code>true</code> or <code>false</code>.",
        "When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.",
        "<strong>Pseudocode</strong>",
        "<blockquote>if (<i>condition is true</i>) {<br>  <i>statement is executed</i><br>}</blockquote>",
        "<strong>Example</strong>",
        "<blockquote>function test (myCondition) {<br>  if (myCondition) {<br>     return \"It was true\";<br>  }<br>  return \"It was false\";<br>}<br>test(true);  // returns \"It was true\"<br>test(false); // returns \"It was false\"</blockquote>",
        "When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>\"It was true\"</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>\"It was false\"</code>.",
        "<h4>Instructions</h4>",
        "Create an <code>if</code> statement inside the function to return <code>\"That was true\"</code> if the parameter <code>wasThatTrue</code> is <code>true</code> and return <code>\"That was false\"</code> otherwise."
      ],
      "challengeSeed": [
        "// Example",
        "function ourFunction(isItTrue) {",
        "  if (isItTrue) { ",
        "    return \"Yes, it's true\";",
        "  }",
        "  return \"No, it's false\";",
        "}",
        "",
        "// Setup",
        "function myFunction(wasThatTrue) {",
        "",
        "  // Only change code below this line.",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line.",
        "",
        "}",
        "",
        "// Change this value to test",
        "myFunction(true);"
      ],
      "solutions": [
        "function myFunction(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"That was true\";\n  }\n  return \"That was false\";\n}"
      ],
      "tests": [
        "assert(typeof myFunction === \"function\", 'message: <code>myFunction</code> should be a function');",
        "assert(typeof myFunction(true) === \"string\", 'message: <code>myFunction(true)</code> should return a string');",
        "assert(typeof myFunction(false) === \"string\", 'message: <code>myFunction(false)</code> should return a string');",
        "assert(myFunction(true) === \"That was true\", 'message: <code>myFunction(true)</code> should return \"That was true\"');",
        "assert(myFunction(false) === \"That was false\", 'message: <code>myFunction(false)</code> should return \"That was false\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d0",
      "title": "Comparison with the Equality Operator",
      "description": [
        "There are many <dfn>Comparison Operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.",
        "The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value at the right of the operator to a variable in the left.",
        "<blockquote>function equalityTest(myVal) {<br>  if (myVal == 10) {<br>     return \"Equal\";<br>  }<br>  return \"Not Equal\";<br>}</blockquote>",
        "If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>\"Equal\"</code>. Otherwise, the function will return <code>\"Not Equal\"</code>.",
        "In order for JavaScript to compare two different <code>data types</code> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. Once it does, however, it can compare terms as follows:",
        "<blockquote>   1   ==  1    // true<br>   1   ==  2    // false<br>   1   == '1'   // true<br>  \"3\"  ==  3    // true</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>equality operator</code> to the indicated line so that the function will return \"Equal\" when <code>val</code> is equivalent to <code>12</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function myTest(val) {",
        "  if (val) { // Change this line",
        "    return \"Equal\";",
        "  }",
        "  return \"Not Equal\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(10) === \"Not Equal\", 'message: <code>myTest(10)</code> should return \"Not Equal\"');",
        "assert(myTest(12) === \"Equal\", 'message: <code>myTest(12)</code> should return \"Equal\"');",
        "assert(myTest(\"12\") === \"Equal\", 'message: <code>myTest(\"12\")</code> should return \"Equal\"');",
        "assert(code.match(/val\\s*==[\\s'\"\\d]+/g).length > 0, 'message: You should use the <code>==</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d1",
      "title": "Comparison with the Strict Equality Operator",
      "description": [
        "Strict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). Unlike the equality operator, strict equality tests both the <code>data type</code> and value of the compared elements.",
        "<strong>Examples</strong>",
        "<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>",
        "In the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.",
        "<h4>Instructions</h4>",
        "Use strict equality operator in <code>if</code> statement so the function will return \"Equal\" when <code>val</code> is strictly equal to <code>7</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function myTest(val) {",
        "  if (val) { // Change this line",
        "    return \"Equal\";",
        "  }",
        "  return \"Not Equal\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(10) === \"Not Equal\", 'message: <code>myTest(10)</code> should return \"Not Equal\"');",
        "assert(myTest(7) === \"Equal\", 'message: <code>myTest(7)</code> should return \"Equal\"');",
        "assert(myTest(\"7\") === \"Not Equal\", 'message: <code>myTest(\"7\")</code> should return \"Not Equal\"');",
        "assert(code.match(/val\\s*===\\s*\\d+/g).length > 0, 'message: You should use the <code>===</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d2",
      "title": "Comparison with the Inequality Operator",
      "description": [
        "The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means \"Not Equal\" and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>",
        "<h4>Instructions</h4>",
        "Add the inequality operator <code>!=</code> in the <code>if</code> statement so that the function will return \"Not Equal\" when <code>val</code> is not equivalent to <code>99</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function myTest(val) {",
        "  if (val) { // Change this line",
        "    return \"Not Equal\";",
        "  }",
        "  return \"Equal\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(99) === \"Equal\", 'message: <code>myTest(99)</code> should return \"Equal\"');",
        "assert(myTest(\"99\") === \"Equal\", 'message: <code>myTest(\"99\")</code> should return \"Equal\"');",
        "assert(myTest(12) === \"Not Equal\", 'message: <code>myTest(12)</code> should return \"Not Equal\"');",
        "assert(myTest(\"12\") === \"Not Equal\", 'message: <code>myTest(\"12\")</code> should return \"Not Equal\"');",
        "assert(myTest(\"bob\") === \"Not Equal\", 'message: <code>myTest(\"bob\")</code> should return \"Not Equal\"');",
        "assert(code.match(/val\\s*!=\\s*\\d+/g).length > 0, 'message: You should use the <code>!=</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d3",
      "title": "Comparison with the Strict Inequality Operator",
      "description": [
        "The strict inequality operator (<code>!==</code>) is the opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. Strict inequality will not convert data types.",
        "<strong>Examples</strong>",
        "<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>strict inequality operator</code> to the <code>if</code> statement so the function will return \"Not Equal\" when <code>val</code> is not strictly equal to <code>17</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function myTest(val) {",
        "  // Only Change Code Below this Line",
        "  ",
        "  if (val) {",
        "",
        "  // Only Change Code Above this Line",
        "",
        "    return \"Not Equal\";",
        "  }",
        "  return \"Equal\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"
      ],
      "tests": [
        "assert(myTest(17) === \"Equal\", 'message: <code>myTest(17)</code> should return \"Equal\"');",
        "assert(myTest(\"17\") === \"Not Equal\", 'message: <code>myTest(\"17\")</code> should return \"Not Equal\"');",
        "assert(myTest(12) === \"Not Equal\", 'message: <code>myTest(12)</code> should return \"Not Equal\"');",
        "assert(myTest(\"bob\") === \"Not Equal\", 'message: <code>myTest(\"bob\")</code> should return \"Not Equal\"');",
        "assert(code.match(/val\\s*!==\\s*\\d+/g).length > 0, 'message: You should use the <code>!==</code> operator');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d4",
      "title": "Comparison with the Greater Than Operator",
      "description": [
        "The greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, greater than operator will convert data types of values while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>greater than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // Change this line",
        "    return \"Over 100\";",
        "  }",
        "  ",
        "  if (val) {  // Change this line",
        "    return \"Over 10\";",
        "  }",
        "",
        "  return \"10 or Under\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"10 or Under\", 'message: <code>myTest(0)</code> should return \"10 or Under\"');",
        "assert(myTest(10) === \"10 or Under\", 'message: <code>myTest(10)</code> should return \"10 or Under\"');",
        "assert(myTest(11) === \"Over 10\", 'message: <code>myTest(11)</code> should return \"Over 10\"');",
        "assert(myTest(99) === \"Over 10\", 'message: <code>myTest(99)</code> should return \"Over 10\"');",
        "assert(myTest(100) === \"Over 10\", 'message: <code>myTest(100)</code> should return \"Over 10\"');",
        "assert(myTest(101) === \"Over 100\", 'message: <code>myTest(101)</code> should return \"Over 100\"');",
        "assert(myTest(150) === \"Over 100\", 'message: <code>myTest(150)</code> should return \"Over 100\"');",
        "assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: You should use the <code>&gt;</code> operator at least twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d5",
      "title": "Comparison with the Greater Than Or Equal To Operator",
      "description": [
        "The <code>greater than or equal to</code> operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.",
        "Like the equality operator, <code>greater than or equal to</code> operator will convert data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>greater than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // Change this line",
        "    return \"20 or Over\";",
        "  }",
        "  ",
        "  if (val) {  // Change this line",
        "    return \"10 or Over\";",
        "  }",
        "",
        "  return \"9 or Under\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n  \n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"9 or Under\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"9 or Under\", 'message: <code>myTest(0)</code> should return \"9 or Under\"');",
        "assert(myTest(9) === \"9 or Under\", 'message: <code>myTest(9)</code> should return \"9 or Under\"');",
        "assert(myTest(10) === \"10 or Over\", 'message: <code>myTest(10)</code> should return \"10 or Over\"');",
        "assert(myTest(11) === \"10 or Over\", 'message: <code>myTest(11)</code> should return \"10 or Over\"');",
        "assert(myTest(19) === \"10 or Over\", 'message: <code>myTest(19)</code> should return \"10 or Over\"');",
        "assert(myTest(100) === \"20 or Over\", 'message: <code>myTest(100)</code> should return \"20 or Over\"');",
        "assert(myTest(21) === \"20 or Over\", 'message: <code>myTest(21)</code> should return \"20 or Over\"');",
        "assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: You should use the <code>&gt;=</code> operator at least twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d6",
      "title": "Comparison with the Less Than Operator",
      "description": [
        "The <dfn>less than</dfn> operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, <dfn>less than</dfn> operator converts data types while comparing.",
        "<strong>Examples</strong>",
        "<blockquote>  2 &lt; 5  // true<br>'3' &lt; 7  // true<br>  5 &lt; 5  // false<br>  3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>less than</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // Change this line",
        "    return \"Under 25\";",
        "  }",
        "  ",
        "  if (val) {  // Change this line",
        "    return \"Under 55\";",
        "  }",
        "",
        "  return \"55 or Over\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n  \n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"Under 25\", 'message: <code>myTest(0)</code> should return \"Under 25\"');",
        "assert(myTest(24) === \"Under 25\", 'message: <code>myTest(24)</code> should return \"Under 25\"');",
        "assert(myTest(25) === \"Under 55\", 'message: <code>myTest(25)</code> should return \"Under 55\"');",
        "assert(myTest(54) === \"Under 55\", 'message: <code>myTest(54)</code> should return \"Under 55\"');",
        "assert(myTest(55) === \"55 or Over\", 'message: <code>myTest(55)</code> should return \"55 or Over\"');",
        "assert(myTest(99) === \"55 or Over\", 'message: <code>myTest(99)</code> should return \"55 or Over\"');",
        "assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: You should use the <code>&lt;</code> operator at least twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d7",
      "title": "Comparison with the Less Than Or Equal To Operator",
      "description": [
        "The <code>less than or equal to</code> operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, <code>less than or equal to</code> converts data types.",
        "<strong>Examples</strong>",
        "<blockquote>  4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>  5 &lt;= 5  // true<br>  3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>",
        "<h4>Instructions</h4>",
        "Add the <code>less than or equal to</code> operator to the indicated lines so that the return statements make sense."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val) {  // Change this line",
        "    return \"Smaller Than or Equal to 12\";",
        "  }",
        "  ",
        "  if (val) {  // Change this line",
        "    return \"Smaller Than or Equal to 24\";",
        "  }",
        "",
        "  return \"25 or More\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n  \n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"25 or More\";\n}"
      ],
      "tests": [
        "assert(myTest(0) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(0)</code> should return \"Smaller Than or Equal to 12\"');",
        "assert(myTest(11) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(11)</code> should return \"Smaller Than or Equal to 12\"');",
        "assert(myTest(12) === \"Smaller Than or Equal to 12\", 'message: <code>myTest(12)</code> should return \"Smaller Than or Equal to 12\"');",
        "assert(myTest(23) === \"Smaller Than or Equal to 24\", 'message: <code>myTest(23)</code> should return \"Smaller Than or Equal to 24\"');",
        "assert(myTest(24) === \"Smaller Than or Equal to 24\", 'message: <code>myTest(24)</code> should return \"Smaller Than or Equal to 24\"');",
        "assert(myTest(25) === \"25 or More\", 'message: <code>myTest(25)</code> should return \"25 or More\"');",
        "assert(myTest(55) === \"25 or More\", 'message: <code>myTest(55)</code> should return \"25 or More\"');",
        "assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1, 'message: You should use the <code>&lt;=</code> operator at least twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d8",
      "title": "Comparisons with the Logical And Operator",
      "description": [
        "Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&&</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.",
        "The same effect could be achieved by nesting an if statement inside another if:",
        "<blockquote>if (num > 5) {<br>  if (num < 10) {<br>    return \"Yes\";<br>  }<br>}<br>return \"No\";</blockquote>",
        "will only return \"Yes\" if <code>num</code> is between <code>6</code> and <code>9</code> (6 and 9 included). The same logic can be written as:",
        "<blockquote>if (num > 5 && num < 10) {<br>  return \"Yes\";<br>}<br>return \"No\";</blockquote>",
        "<h4>Instructions</h4>",
        "Combine the two if statements into one statement which will return <code>\"Yes\"</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return <code>\"No\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  // Only change code below this line",
        "",
        "  if (val) {",
        "    if (val) {",
        "      return \"Yes\";",
        "    }",
        "  }",
        "",
        "  // Only change code above this line",
        "  return \"No\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(10);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"
      ],
      "tests": [
        "assert(code.match(/&&/g).length === 1, 'message: You should use the <code>&&</code> operator once');",
        "assert(code.match(/if/g).length === 1, 'message: You should only have one <code>if</code> statement');",
        "assert(myTest(0) === \"No\", 'message: <code>myTest(0)</code> should return \"No\"');",
        "assert(myTest(24) === \"No\", 'message: <code>myTest(24)</code> should return \"No\"');",
        "assert(myTest(25) === \"Yes\", 'message: <code>myTest(25)</code> should return \"Yes\"');",
        "assert(myTest(30) === \"Yes\", 'message: <code>myTest(30)</code> should return \"Yes\"');",
        "assert(myTest(50) === \"Yes\", 'message: <code>myTest(50)</code> should return \"Yes\"');",
        "assert(myTest(51) === \"No\", 'message: <code>myTest(51)</code> should return \"No\"');",
        "assert(myTest(75) === \"No\", 'message: <code>myTest(75)</code> should return \"No\"');",
        "assert(myTest(80) === \"No\", 'message: <code>myTest(80)</code> should return \"No\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244d9",
      "title": "Comparisons with the Logical Or Operator",
      "description": [
        "The <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.",
        "The pattern below should look familiar from prior waypoints:",
        "<blockquote>if (num > 10) {<br>  return \"No\";<br>}<br>if (num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "will return \"Yes\" only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:",
        "<blockquote>if (num > 10 || num < 5) {<br>  return \"No\";<br>}<br>return \"Yes\";</blockquote>",
        "<h4>Instructions</h4>",
        "Combine the two <code>if</code> statements into one statement which returns <code>\"Outside\"</code> if <code>val</code> is not between <code>10</code> and <code>20</code>, inclusive. Otherwise, return <code>\"Inside\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  // Only change code below this line",
        "",
        "  if (val) {",
        "    return \"Outside\";",
        "  }",
        "",
        "  if (val) {",
        "    return \"Outside\";",
        "  }",
        "",
        "  // Only change code above this line",
        "  return \"Inside\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(15);"
      ],
      "solutions": [
        "function myTest(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"
      ],
      "tests": [
        "assert(code.match(/\\|\\|/g).length === 1, 'message: You should use the <code>||</code> operator once');",
        "assert(code.match(/if/g).length === 1, 'message: You should only have one <code>if</code> statement');",
        "assert(myTest(0) === \"Outside\", 'message: <code>myTest(0)</code> should return \"Outside\"');",
        "assert(myTest(9) === \"Outside\", 'message: <code>myTest(9)</code> should return \"Outside\"');",
        "assert(myTest(10) === \"Inside\", 'message: <code>myTest(10)</code> should return \"Inside\"');",
        "assert(myTest(15) === \"Inside\", 'message: <code>myTest(15)</code> should return \"Inside\"');",
        "assert(myTest(19) === \"Inside\", 'message: <code>myTest(19)</code> should return \"Inside\"');",
        "assert(myTest(20) === \"Inside\", 'message: <code>myTest(20)</code> should return \"Inside\"');",
        "assert(myTest(21) === \"Outside\", 'message: <code>myTest(21)</code> should return \"Outside\"');",
        "assert(myTest(25) === \"Outside\", 'message: <code>myTest(25)</code> should return \"Outside\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244da",
      "title": "Introducing Else Statements",
      "description": [
        "When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false?  Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.",
        "<blockquote>if (num > 10) {<br>  return \"Bigger than 10\";<br>} else {<br>  return \"10 or Less\";<br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Combine the <code>if</code> statements into a single <code>if/else</code> statement."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var result = \"\";",
        "  // Only change code below this line",
        "  ",
        "  if (val > 5) {",
        "    result = \"Bigger than 5\";",
        "  }",
        "  ",
        "  if (val <= 5) {",
        "    result = \"5 or Smaller\";",
        "  }",
        "  ",
        "  // Only change code above this line",
        "  return result;",
        "}",
        "",
        "// Change this value to test",
        "myTest(4);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"
      ],
      "tests": [
        "assert(code.match(/if/g).length === 1, 'message: You should only have one <code>if</code> statement');",
        "assert(/else/g.test(code), 'message: You should use an <code>else</code> statement');",
        "assert(myTest(4) === \"5 or Smaller\", 'message: <code>myTest(4)</code> should return \"5 or Smaller\"');",
        "assert(myTest(5) === \"5 or Smaller\", 'message: <code>myTest(5)</code> should return \"5 or Smaller\"');",
        "assert(myTest(6) === \"Bigger than 5\", 'message: <code>myTest(6)</code> should return \"Bigger than 5\"');",
        "assert(myTest(10) === \"Bigger than 5\", 'message: <code>myTest(10)</code> should return \"Bigger than 5\"');",
        "assert(/var result = \"\";/.test(code) && /return result;/.test(code), 'message: Do not change the code above or below the lines.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244db",
      "title": "Introducing Else If Statements",
      "description": [
        "If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.",
        "<blockquote>if (num > 15) {<br>  return \"Bigger than 15\";<br>} else if (num < 5) {<br>  return \"Smaller than 5\";<br>} else {<br>  return \"Between 5 and 15\";<br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Convert the logic to use <code>else if</code> statements."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val > 10) {",
        "    return \"Greater than 10\";",
        "  }",
        "  ",
        "  if (val < 5) {",
        "    return \"Smaller than 5\";",
        "  }",
        "  ",
        "  return \"Between 5 and 10\";",
        "}",
        "",
        "// Change this value to test",
        "myTest(7);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"
      ],
      "tests": [
        "assert(code.match(/else/g).length > 1, 'message: You should have at least two <code>else</code> statements');",
        "assert(code.match(/if/g).length > 1, 'message: You should have at least two <code>if</code> statements');",
        "assert(myTest(0) === \"Smaller than 5\", 'message: <code>myTest(0)</code> should return \"Smaller than 5\"');",
        "assert(myTest(5) === \"Between 5 and 10\", 'message: <code>myTest(5)</code> should return \"Between 5 and 10\"');",
        "assert(myTest(7) === \"Between 5 and 10\", 'message: <code>myTest(7)</code> should return \"Between 5 and 10\"');",
        "assert(myTest(10) === \"Between 5 and 10\", 'message: <code>myTest(10)</code> should return \"Between 5 and 10\"');",
        "assert(myTest(12) === \"Greater than 10\", 'message: <code>myTest(12)</code> should return \"Greater than 10\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5690307fddb111c6084545d7",
      "title": "Logical Order in If Else Statements",
      "description": [
        "Order is important in <code>if</code>, <code>else if</code> statements.",
        "The loop is executed from top to bottom so you will want to be careful of what statement comes first.",
        "Take these two functions as an example.",
        "Heres the first:",
        "<blockquote>function foo(x) {<br>  if (x < 1) {<br>    return \"Less than one\";<br>  } else if (x < 2) {<br>    return \"Less than two\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "And the second just switches the order of the statements:",
        "<blockquote>function bar(x) {<br>  if (x < 2) {<br>    return \"Less than two\";<br>  } else if (x < 1) {<br>    return \"Less than one\";<br>  } else {<br>    return \"Greater than or equal to two\";<br>  }<br>}</blockquote>",
        "While these two functions look nearly identical if we pass a number to both we get different outputs.",
        "<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>",
        "<h4>Instructions</h4>",
        "Change the order of logic in the function so that it will return the correct statements in all cases."
      ],
      "challengeSeed": [
        "function myTest(val) {",
        "  if (val < 10) {",
        "    return \"Less than 10\";",
        "  } else if (val < 5) {",
        "    return \"Less than 5\";",
        "  } else {",
        "    return \"Greater than or equal to 10\";",
        "  }",
        "}",
        "",
        "// Change this value to test",
        "myTest(7);"
      ],
      "solutions": [
        "function myTest(val) {\n  if(val < 5) {\n    return \"Less than 5\";            \n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"
      ],
      "tests": [
        "assert(myTest(4) === \"Less than 5\", 'message: <code>myTest(4)</code> should return \"Less than 5\"');",
        "assert(myTest(6) === \"Less than 10\", 'message: <code>myTest(6)</code> should return \"Less than 10\"');",
        "assert(myTest(11) === \"Greater than or equal to 10\", 'message: <code>myTest(11)</code> should return \"Greater than or equal to 10\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244dc",
      "title": "Chaining If Else Statements",
      "description": [
        "<code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:",
        "<blockquote>if (<em>condition1</em>) {<br>  <em>statement1</em><br>} else if (<em>condition2</em>) {<br>  <em>statement2</em><br>} else if (<em>condition3</em>) {<br>  <em>statement3</em><br>. . .<br>} else {<br>  <em>statementN</em><br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Write chained <code>if</code>/<code>else if</code> statements to fulfill the following conditions:",
        "<code>num &lt;   5</code> - return \"Tiny\"<br><code>num &lt;  10</code> - return \"Small\"<br><code>num &lt; 15</code> - return \"Medium\"<br><code>num &lt; 20</code> - return \"Large\"<br><code>num >= 20</code>  - return \"Huge\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(num) {",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  return \"Change Me\";",
        "  // Only change code above this line",
        "}",
        "",
        "// Change this value to test",
        "myTest(7);"
      ],
      "solutions": [
        "function myTest(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"
      ],
      "tests": [
        "assert(code.match(/else/g).length > 3, 'message: You should have at least four <code>else</code> statements');",
        "assert(code.match(/if/g).length > 3, 'message: You should have at least four <code>if</code> statements');",
        "assert(code.match(/return/g).length >= 5, 'message: You should have at least five <code>return</code> statements');",
        "assert(myTest(0) === \"Tiny\", 'message: <code>myTest(0)</code> should return \"Tiny\"');",
        "assert(myTest(4) === \"Tiny\", 'message: <code>myTest(4)</code> should return \"Tiny\"');",
        "assert(myTest(5) === \"Small\", 'message: <code>myTest(5)</code> should return \"Small\"');",
        "assert(myTest(8) === \"Small\", 'message: <code>myTest(8)</code> should return \"Small\"');",
        "assert(myTest(10) === \"Medium\", 'message: <code>myTest(10)</code> should return \"Medium\"');",
        "assert(myTest(14) === \"Medium\", 'message: <code>myTest(14)</code> should return \"Medium\"');",
        "assert(myTest(15) === \"Large\", 'message: <code>myTest(15)</code> should return \"Large\"');",
        "assert(myTest(17) === \"Large\", 'message: <code>myTest(17)</code> should return \"Large\"');",
        "assert(myTest(20) === \"Huge\", 'message: <code>myTest(20)</code> should return \"Huge\"');",
        "assert(myTest(25) === \"Huge\", 'message: <code>myTest(25)</code> should return \"Huge\"');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5664820f61c48e80c9fa476c",
      "title": "Golf Code",
      "description": [
        "In the game of <a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a> each hole has a <code>par</code> for the average number of <code>strokes</code> needed to sink the ball. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.",
        "Your function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):",
        "<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>",
        "<code>par</code> and <code>strokes</code> will always be numeric and positive."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function golfScore(par, strokes) {",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  return \"Change Me\";",
        "  // Only change code above this line",
        "}",
        "",
        "// Change these values to test",
        "golfScore(5, 4);"
      ],
      "solutions": [
        "function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n  \n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n  \n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n  \n  if (strokes === par) {\n    return \"Par\";\n  }\n  \n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n  \n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n  \n  return \"Go Home!\";\n}"
      ],
      "tests": [
        "assert(golfScore(4, 1) === \"Hole-in-one!\", 'message: <code>golfScore(4, 1)</code> should return \"Hole-in-one!\"');",
        "assert(golfScore(4, 2) === \"Eagle\", 'message: <code>golfScore(4, 2)</code> should return \"Eagle\"');",
        "assert(golfScore(5, 2) === \"Eagle\", 'message: <code>golfScore(5, 2)</code> should return \"Eagle\"');",
        "assert(golfScore(4, 3) === \"Birdie\", 'message: <code>golfScore(4, 3)</code> should return \"Birdie\"');",
        "assert(golfScore(4, 4) === \"Par\", 'message: <code>golfScore(4, 4)</code> should return \"Par\"');",
        "assert(golfScore(1, 1) === \"Hole-in-one!\", 'message: <code>golfScore(1, 1)</code> should return \"Hole-in-one!\"');",
        "assert(golfScore(5, 5) === \"Par\", 'message: <code>golfScore(5, 5)</code> should return \"Par\"');",
        "assert(golfScore(4, 5) === \"Bogey\", 'message: <code>golfScore(4, 5)</code> should return \"Bogey\"');",
        "assert(golfScore(4, 6) === \"Double Bogey\", 'message: <code>golfScore(4, 6)</code> should return \"Double Bogey\"');",
        "assert(golfScore(4, 7) === \"Go Home!\", 'message: <code>golfScore(4, 7)</code> should return \"Go Home!\"');",
        "assert(golfScore(5, 9) === \"Go Home!\", 'message: <code>golfScore(5, 9)</code> should return \"Go Home!\"');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244dd",
      "title": "Selecting from many options with Switch Statements",
      "description": [
        "If you have many options to choose from, use a <code>switch</code> statement. A <code>switch</code> statement tests a value and can have many <code>case</code> statements which defines various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.",
        "Here is a <dfn>pseudocode</dfn> example:",
        "<blockquote>switch (num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  case valueN:<br>    statementN;<br>    break;<br>}</blockquote>",
        "<code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.",
        "<h4>Instructions</h4>",
        "Write a switch statement which tests <code>val</code> and sets <code>answer</code> for the following conditions:<br><code>1</code> - \"alpha\"<br><code>2</code> - \"beta\"<br><code>3</code> - \"gamma\"<br><code>4</code> - \"delta\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line  ",
        "  return answer;  ",
        "}",
        "",
        "// Change this value to test",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch (val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(1) === \"alpha\", 'message: <code>myTest(1) should have a value of \"alpha\"');",
        "assert(myTest(2) === \"beta\", 'message: <code>myTest(2) should have a value of \"beta\"');",
        "assert(myTest(3) === \"gamma\", 'message: <code>myTest(3) should have a value of \"gamma\"');",
        "assert(myTest(4) === \"delta\", 'message: <code>myTest(4) should have a value of \"delta\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: You should not use any <code>if</code> or <code>else</code> statements');",
        "assert(code.match(/break/g).length > 2, 'message: You should have at least 3 <code>break</code> statements');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244de",
      "title": "Adding a default option in Switch statements",
      "description": [
        "In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.",
        "A <code>default</code> statement should be the last case.",
        "<blockquote>switch (num) {<br>  case value1:<br>    statement1;<br>    break;<br>  case value2:<br>    statement2;<br>    break;<br>...<br>  default:<br>    defaultStatement;<br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Write a switch statement to set <code>answer</code> for the following conditions:<br><code>\"a\"</code> - \"apple\"<br><code>\"b\"</code> - \"bird\"<br><code>\"c\"</code> - \"cat\"<br><code>default</code> - \"stuff\""
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line  ",
        "  return answer;  ",
        "}",
        "",
        "// Change this value to test",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(\"a\") === \"apple\", 'message: <code>myTest(\"a\") should have a value of \"apple\"');",
        "assert(myTest(\"b\") === \"bird\", 'message: <code>myTest(\"b\") should have a value of \"bird\"');",
        "assert(myTest(\"c\") === \"cat\", 'message: <code>myTest(\"c\") should have a value of \"cat\"');",
        "assert(myTest(\"d\") === \"stuff\", 'message: <code>myTest(\"d\") should have a value of \"stuff\"');",
        "assert(myTest(4) === \"stuff\", 'message: <code>myTest(4) should have a value of \"stuff\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: You should not use any <code>if</code> or <code>else</code> statements');",
        "assert(code.match(/break/g).length > 2, 'message: You should have at least 3 <code>break</code> statements');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244df",
      "title": "Multiple Identical Options in Switch Statements",
      "description": [
        "If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:",
        "<blockquote>switch(val) {<br>  case 1:<br>  case 2:<br>  case 3:<br>    result = \"1, 2, or 3\";<br>    break;<br>  case 4:<br>    result = \"4 alone\";<br>}</blockquote>",
        "Cases for 1, 2, and 3 will all produce the same result.",
        "<h4>Instructions</h4>",
        "Write a switch statement to set <code>answer</code> for the following ranges:<br><code>1-3</code> - \"Low\"<br><code>4-6</code> - \"Mid\"<br><code>7-9</code> - \"High\"",
        "<strong>Note</strong><br>You will need to have a <code>case</code> statement for each number in the range."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line  ",
        "  return answer;  ",
        "}",
        "",
        "// Change this value to test",
        "myTest(1);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n  \n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n  \n  return answer;  \n}"
      ],
      "tests": [
        "assert(myTest(1) === \"Low\", 'message: <code>myTest(1)</code> should return \"Low\"');",
        "assert(myTest(2) === \"Low\", 'message: <code>myTest(2)</code> should return \"Low\"');",
        "assert(myTest(3) === \"Low\", 'message: <code>myTest(3)</code> should return \"Low\"');",
        "assert(myTest(4) === \"Mid\", 'message: <code>myTest(4)</code> should return \"Mid\"');",
        "assert(myTest(5) === \"Mid\", 'message: <code>myTest(5)</code> should return \"Mid\"');",
        "assert(myTest(6) === \"Mid\", 'message: <code>myTest(6)</code> should return \"Mid\"');",
        "assert(myTest(7) === \"High\", 'message: <code>myTest(7)</code> should return \"High\"');",
        "assert(myTest(8) === \"High\", 'message: <code>myTest(8)</code> should return \"High\"');",
        "assert(myTest(9) === \"High\", 'message: <code>myTest(9)</code> should return \"High\"');",
        "assert(!/else/g.test(code) || !/if/g.test(code), 'message: You should not use any <code>if</code> or <code>else</code> statements');",
        "assert(code.match(/case/g).length === 9, 'message: You should have nine <code>case</code> statements');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244e0",
      "title": "Replacing If Else Chains with Switch",
      "description": [
        "If you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>if else</code> statements. The following:",
        "<blockquote>if (val === 1) {<br>  answer = \"a\";<br>} else if (val === 2) {<br>  answer = \"b\";<br>} else {<br>  answer = \"c\";<br>}</blockquote>",
        "can be replaced with:",
        "<blockquote>switch (val) {<br>  case 1:<br>    answer = \"a\";<br>    break;<br>  case 2:<br>    answer = \"b\";<br>    break;<br>  default:<br>    answer = \"c\";<br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Change the chained <code>if</code>/<code>if else</code> statements into a <code>switch</code> statement."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function myTest(val) {",
        "  var answer = \"\";",
        "  // Only change code below this line",
        "  ",
        "  if (val === \"bob\") {",
        "    answer = \"Marley\";",
        "  } else if (val === 42) {",
        "    answer = \"The Answer\";",
        "  } else if (val === 1) {",
        "    answer = \"There is no #1\";",
        "  } else if (val === 99) {",
        "    answer = \"Missed me by this much!\";",
        "  } else if (val === 7) {",
        "    answer = \"Ate Nine\";",
        "  }",
        "  ",
        "  // Only change code above this line  ",
        "  return answer;  ",
        "}",
        "",
        "// Change this value to test",
        "myTest(7);",
        ""
      ],
      "solutions": [
        "function myTest(val) {\n  var answer = \"\";\n\n  switch (val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;  \n}"
      ],
      "tests": [
        "assert(!/else/g.test(code), 'message: You should not use any <code>else</code> statements');",
        "assert(!/if/g.test(code), 'message: You should not use any <code>if</code> statements');",
        "assert(code.match(/break/g).length >= 4, 'message: You should have at least four <code>break</code> statements');",
        "assert(myTest(\"bob\") === \"Marley\", 'message: <code>myTest(\"bob\")</code> should be \"Marley\"');",
        "assert(myTest(42) === \"The Answer\", 'message: <code>myTest(42)</code> should be \"The Answer\"');",
        "assert(myTest(1) === \"There is no #1\", 'message: <code>myTest(1)</code> should be \"There is no #1\"');",
        "assert(myTest(99) === \"Missed me by this much!\", 'message: <code>myTest(99)</code> should be \"Missed me by this much!\"');",
        "assert(myTest(7) === \"Ate Nine\", 'message: <code>myTest(7)</code> should be \"Ate Nine\"');",
        "assert(myTest(\"John\") === \"\", 'message: <code>myTest(\"John\")</code> should be \"\" (empty string)');",
        "assert(myTest(156) === \"\", 'message: <code>myTest(156)</code> should be \"\" (empty string)');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5679ceb97cbaa8c51670a16b",
      "title": "Returning Boolean Values from Functions",
      "description": [
        "You may recall from <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.",
        "A common <dfn>anti-pattern</dfn> is to use an <code>if/else</code> statement to do a comparison and then <code>return</code> <code>true</code>/<code>false</code>:",
        "<blockquote>function isEqual(a,b) {<br>  if (a === b) {<br>    return true;<br>  } else {<br>    return false;<br>  }<br>}</blockquote>",
        "Since <code>===</code> returns <code>true</code> or <code>false</code>, we can simply return the result of the comparison:",
        "<blockquote>function isEqual(a,b) {<br>  return a === b;<br>}</blockquote>",
        "<h4>Instructions</h4>",
        "Fix the function <code>isLess</code> to remove the <code>if/else</code> statements."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function isLess(a, b) {",
        "  // Fix this code",
        "  if (a < b) {",
        "    return true;",
        "  } else {",
        "    return false;",
        "  }",
        "}",
        "",
        "// Change these values to test",
        "isLess(10, 15);"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function isLess(a, b) {\n  return a < b;\n}"
      ],
      "tests": [
        "assert(isLess(10,15) === true, 'message: <code>isLess(10,15)</code> should return <code>true</code>');",
        "assert(isLess(15, 10) === false, 'message: <code>isLess(15,10)</code> should return <code>false</code>');",
        "assert(!/if|else/g.test(code), 'message: You should not use any <code>if</code> or <code>else</code> statements');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c4",
      "title": "Return Early Pattern for Functions",
      "description": [
        "When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.",
        "<strong>Example</strong>",
        "<blockquote>function myFun() {<br>  console.log(\"Hello\");<br>  return \"World\";<br>  console.log(\"byebye\")<br>}<br>myFun();</blockquote>",
        "The above outputs \"Hello\" to the console, returns \"World\", but <code>\"byebye\"</code> is never output, because the function exits at the <code>return</code> statement.",
        "<h4>Instructions</h4>",
        "Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.",
        "<strong>Hint</strong><br>Remember that <a href='http://www.freecodecamp.com/challenges/understanding-uninitialized-variables' target='_blank'><code>undefined</code> is a keyword</a>, not a string."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function abTest(a, b) {",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  ",
        "  // Only change code above this line",
        "",
        "  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));",
        "}",
        "",
        "// Change values below to test your code",
        "abTest(2,2);"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  } \n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"
      ],
      "tests": [
        "assert(typeof abTest(2,2) === 'number' , 'message: <code>abTest(2,2)</code> should return a number');",
        "assert(abTest(2,2) === 8 , 'message: <code>abTest(2,2)</code> should return <code>8</code>');",
        "assert(abTest(-2,2) === undefined , 'message: <code>abTest(-2,2)</code> should return <code>undefined</code>');",
        "assert(abTest(2,-2) === undefined , 'message: <code>abTest(2,-2)</code> should return <code>undefined</code>');",
        "assert(abTest(2,8) === 18 , 'message: <code>abTest(2,8)</code> should return <code>18</code>');",
        "assert(abTest(3,3) === 12 , 'message: <code>abTest(3,3)</code> should return <code>12</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "565bbe00e9cc8ac0725390f4",
      "title": "Counting Cards",
      "description": [
        "In the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called <a href='https://en.wikipedia.org/wiki/Card_counting' target='_blank'>Card Counting</a>.",
        "Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.",
        "<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K','A'</td></tr></tbody></table>",
        "You will write a card counting function. It will receive a <code>card</code> parameter and increment or decrement the global <code>count</code> variable according to the card's value (see table). The function will then return a string with the current count and the string <code>\"Bet\"</code> if the count is positive, or <code>\"Hold\"</code> if the count is zero or negative. The current count and the player's decision (<code>\"Bet\"</code> or <code>\"Hold\"</code>) should be separated by a single space.",
        "<strong>Example Output</strong><br><code>\"-3 Hold\"<br>\"5 Bet\"</code>",
        "<strong>Hint</strong><br>Do NOT reset <code>count</code> to 0 when value is 7, 8, or 9."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var count = 0;",
        "",
        "function cc(card) {",
        "  // Only change code below this line",
        "  ",
        "  ",
        "  return \"Change Me\";",
        "  // Only change code above this line",
        "}",
        "",
        "// Add/remove calls to test your function.",
        "// Note: Only the last will display",
        "cc(2); cc(3); cc(7); cc('K'); cc('A');"
      ],
      "solutions": [
        "var count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"
      ],
      "tests": [
        "assert((function(){ count = 0; cc(2);cc(3);cc(4);cc(5);var out = cc(6); if(out === \"5 Bet\") {return true;} return false; })(), 'message: Cards Sequence 2, 3, 4, 5, 6 should return <code>\"5 Bet\"</code>');",
        "assert((function(){ count = 0; cc(7);cc(8);var out = cc(9); if(out === \"0 Hold\") {return true;} return false; })(), 'message: Cards Sequence 7, 8, 9 should return <code>\"0 Hold\"</code>');",
        "assert((function(){ count = 0; cc(10);cc('J');cc('Q');cc('K');var out = cc('A'); if(out === \"-5 Hold\") {return true;} return false; })(), 'message: Cards Sequence 10, J, Q, K, A should return <code>\"-5 Hold\"</code>');",
        "assert((function(){ count = 0; cc(3);cc(7);cc('Q');cc(8);var out = cc('A'); if(out === \"-1 Hold\") {return true;} return false; })(), 'message: Cards Sequence 3, 7, Q, 8, A should return <code>\"-1 Hold\"</code>');",
        "assert((function(){ count = 0; cc(2);cc('J');cc(9);cc(2);var out = cc(7); if(out === \"1 Bet\") {return true;} return false; })(), 'message: Cards Sequence 2, J, 9, 2, 7 should return <code>\"1 Bet\"</code>');",
        "assert((function(){ count = 0; cc(3);cc(2);cc('A');cc(10);var out = cc('K'); if(out === \"-1 Hold\") {return true;} return false; })(), 'message: Cards Sequence 3, 2, A, 10, K should return <code>\"-1 Hold\"</code>');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d0",
      "title": "Build JavaScript Objects",
      "description": [
        "You may have heard the term <code>object</code> before.",
        "Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.",
        "Here's a sample object:",
        "<blockquote>var cat = {<br>  \"name\": \"Whiskers\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>",
        "Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.",
        "<h4>Instructions</h4>",
        "Make an object that represents a dog called <code>myDog</code> which contains the properties <code>\"name\"</code> (a string), <code>\"legs\"</code>, <code>\"tails\"</code> and <code>\"friends\"</code>.",
        "You can set these object properties to whatever values you want, as long <code>\"name\"</code> is a string, <code>\"legs\"</code> and <code>\"tails\"</code> are numbers, and <code>\"friends\"</code> is an array."
      ],
      "challengeSeed": [
        "// Example",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "// Only change code below this line.",
        "",
        "var myDog = {",
        "  ",
        "  ",
        "  ",
        "  ",
        "};"
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]  \n};"
      ],
      "tests": [
        "assert((function(z){if(z.hasOwnProperty(\"name\") && z.name !== undefined && typeof z.name === \"string\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.');",
        "assert((function(z){if(z.hasOwnProperty(\"legs\") && z.legs !== undefined && typeof z.legs === \"number\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.');",
        "assert((function(z){if(z.hasOwnProperty(\"tails\") && z.tails !== undefined && typeof z.tails === \"number\"){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.');",
        "assert((function(z){if(z.hasOwnProperty(\"friends\") && z.friends !== undefined && Array.isArray(z.friends)){return true;}else{return false;}})(myDog), 'message: <code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.');",
        "assert((function(z){return Object.keys(z).length === 4;})(myDog), 'message: <code>myDog</code> should only contain all the given properties.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c7",
      "title": "Accessing Objects Properties with the Dot Operator",
      "description": [
        "There are two ways to access the properties of an object: the dot operator (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.",
        "The dot operator is what you use when you know the name of the property you're trying to access ahead of time.",
        "Here is a sample of using the dot operator (<code>.</code>) to read an object property:",
        "<blockquote>var myObj = {<br>  prop1: \"val1\",<br>  prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>",
        "<h4>Instructions</h4>",
        "Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object property <code>shirt</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var testObj = {",
        "  \"hat\": \"ballcap\",",
        "  \"shirt\": \"jersey\",",
        "  \"shoes\": \"cleats\"",
        "};",
        "",
        "// Only change code below this line",
        "",
        "var hatValue = testObj;      // Change this line",
        "var shirtValue = testObj;    // Change this line"
      ],
      "tail": [
        "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);"
      ],
      "solutions": [
        "var testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nvar hatValue = testObj.hat;  \nvar shirtValue = testObj.shirt;"
      ],
      "tests": [
        "assert(typeof hatValue === 'string' , 'message: <code>hatValue</code> should be a string');",
        "assert(hatValue === 'ballcap' , 'message: The value of <code>hatValue</code> should be <code>\"ballcap\"</code>');",
        "assert(typeof shirtValue === 'string' , 'message: <code>shirtValue</code> should be a string');",
        "assert(shirtValue === 'jersey' , 'message: The value of <code>shirtValue</code> should be <code>\"jersey\"</code>');",
        "assert(code.match(/testObj\\.\\w+/g).length > 1, 'message: You should use dot notation twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c8",
      "title": "Accessing Objects Properties with Bracket Notation",
      "description": [
        "The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in it, you will need to use bracket notation.",
        "Here is a sample of using bracket notation to read an object property:",
        "<blockquote>var myObj = {<br>  \"Space Name\": \"Kirk\",<br>  \"More Space\": \"Spock\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock</blockquote>",
        "Note that property names with spaces in them must be in quotes (single or double).",
        "<h4>Instructions</h4>",
        "Read the values of the properties <code>\"an entree\"</code> and <code>\"the drink\"</code> of <code>testObj</code> using bracket notation."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var testObj = {",
        "  \"an entree\": \"hamburger\",",
        "  \"my side\": \"veggies\",",
        "  \"the drink\": \"water\"",
        "};",
        "",
        "// Only change code below this line",
        "",
        "var entreeValue = testObj;   // Change this line",
        "var drinkValue = testObj;    // Change this line"
      ],
      "tail": [
        "(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);"
      ],
      "solutions": [
        "var testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nvar entreeValue = testObj[\"an entree\"];\nvar drinkValue = testObj['the drink'];"
      ],
      "tests": [
        "assert(typeof entreeValue === 'string' , 'message: <code>entreeValue</code> should be a string');",
        "assert(entreeValue === 'hamburger' , 'message: The value of <code>entreeValue</code> should be <code>\"hamburger\"</code>');",
        "assert(typeof drinkValue === 'string' , 'message: <code>drinkValue</code> should be a string');",
        "assert(drinkValue === 'water' , 'message: The value of <code>drinkValue</code> should be <code>\"water\"</code>');",
        "assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1, 'message: You should use bracket notation twice');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244c9",
      "title": "Accessing Objects Properties with Variables",
      "description": [
        "Another use of bracket notation on objects is to use a variable to access a property. This can be very useful for iterating through lists of the object properties or for doing the lookup.",
        "Here is an example of using a variable to access a property:",
        "<blockquote>var someProp = \"propName\";<br>var myObj = {<br>  propName: \"Some Value\"<br >}<br>myObj[someProp]; // \"Some Value\"</blockquote>",
        "Here is one more:",
        "<blockquote>var myDog = \"Hunter\";<br>var dogs = {<br>  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br >}<br>var breed = dogs[myDog]; // \"Hunter\"<br>console.log(breed)// \"Doberman\"</blockquote>",
        "Note that we  do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>",
        "<h4>Instructions</h4>",
        "Use the <code>playerNumber</code> variable to lookup player <code>16</code> in <code>testObj</code> using bracket notation."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var testObj = {",
        "  12: \"Namath\",",
        "  16: \"Montana\",",
        "  19: \"Unitas\"",
        "};",
        "",
        "// Only change code below this line;",
        "",
        "var playerNumber;       // Change this Line",
        "var player = testObj;   // Change this Line"
      ],
      "tail": [
        "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}"
      ],
      "solutions": [
        "var testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nvar playerNumber = 16;\nvar player = testObj[playerNumber];"
      ],
      "tests": [
        "assert(typeof playerNumber === 'number', 'message: <code>playerNumber</code> should be a number');",
        "assert(typeof player === 'string', 'message: The variable <code>player</code> should be a string');",
        "assert(player === 'Montana', 'message: The value of <code>player</code> should be \"Montana\"');",
        "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code),'message: You should use bracket notation to access <code>testObj</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d1",
      "title": "Updating Object Properties",
      "description": [
        "After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.",
        "For example, let's look at <code>ourDog</code>:",
        "<blockquote>var ourDog = {<br>  \"name\": \"Camper\",<br>  \"legs\": 4,<br>  \"tails\": 1,<br>  \"friends\": [\"everything!\"]<br>};</blockquote>",
        "Since he's a particularly happy dog, let's change his name to \"Happy Camper\". Here's how we update his object's name property:",
        "<code>ourDog.name = \"Happy Camper\";</code> or",
        "<code>ourDog[\"name\"] = \"Happy Camper\";</code>",
        "Now when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we'll get his new name, \"Happy Camper\".",
        "<h4>Instructions</h4>",
        "Update the <code>myDog</code> object's name property. Let's change her name from \"Coder\" to \"Happy Coder\". You can use either dot or bracket notation."
      ],
      "challengeSeed": [
        "// Example",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "ourDog.name = \"Happy Camper\";",
        "",
        "// Setup",
        "var myDog = {",
        "  \"name\": \"Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"]",
        "};",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"
      ],
      "tests": [
        "assert(/happy coder/gi.test(myDog.name), 'message: Update <code>myDog</code>&apos;s <code>\"name\"</code> property to equal \"Happy Coder\".');",
        "assert(/\"name\": \"Coder\"/.test(code), 'message: Do not edit the <code>myDog</code> definition');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d2",
      "title": "Add New Properties to a JavaScript Object",
      "description": [
        "You can add new properties to existing JavaScript objects the same way you would modify them.",
        "Here's how we would add a <code>\"bark\"</code> property to <code>ourDog</code>:",
        "<code>ourDog.bark = \"bow-wow\";</code> ",
        "or",
        "<code>ourDog[\"bark\"] = \"bow-wow\";</code>",
        "Now when we evaluate <code>ourDog.bark</code>, we'll get his bark, \"bow-wow\".",
        "<h4>Instructions</h4>",
        "Add a <code>\"bark\"</code> property to <code>myDog</code> and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation."
      ],
      "challengeSeed": [
        "// Example",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"]",
        "};",
        "",
        "ourDog.bark = \"bow-wow\";",
        "",
        "// Setup",
        "var myDog = {",
        "  \"name\": \"Happy Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"]",
        "};",
        "",
        "// Only change code below this line.",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"
      ],
      "tests": [
        "assert(myDog.bark !== undefined, 'message: Add the property <code>\"bark\"</code> to <code>myDog</code>.');",
        "assert(!/bark[^\\n]:/.test(code), 'message: Do not add <code>\"bark\"</code> to the setup section');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56bbb991ad1ed5201cd392d3",
      "title": "Delete Properties from a JavaScript Object",
      "description": [
        "We can also delete properties from objects like this:",
        "<code>delete ourDog.bark;</code>",
        "<h4>Instructions</h4>",
        "Delete the <code>\"tails\"</code> property from <code>myDog</code>. You may use either dot or bracket notation."
      ],
      "challengeSeed": [
        "// Example",
        "var ourDog = {",
        "  \"name\": \"Camper\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"everything!\"],",
        "  \"bark\": \"bow-wow\"",
        "};",
        "",
        "delete ourDog.bark;",
        "",
        "// Setup",
        "var myDog = {",
        "  \"name\": \"Happy Coder\",",
        "  \"legs\": 4,",
        "  \"tails\": 1,",
        "  \"friends\": [\"Free Code Camp Campers\"],",
        "  \"bark\": \"woof\"",
        "};",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "(function(z){return z;})(myDog);"
      ],
      "solutions": [
        "var ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\nvar myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"Free Code Camp Campers\"],\n  \"bark\": \"woof\"\n};\n\ndelete myDog.tails;"
      ],
      "tests": [
        "assert(myDog.tails === undefined, 'message: Delete the property <code>\"tails\"</code> from <code>myDog</code>.');",
        "assert(code.match(/\"tails\": 1/g).length > 1, 'message: Do not modify the <code>myDog</code> setup');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244ca",
      "title": "Using Objects for Lookups",
      "description": [
        "Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to \"lookup\" values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.",
        "Here is an example of a simple reverse alphabet lookup:",
        "<blockquote>var alpha = {<br>  1:\"Z\",<br>  2:\"Y\",<br>  3:\"X\",<br>  4:\"W\",<br>  ...<br>  24:\"C\",<br>  25:\"B\",<br>  26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>",
        "<h4>Instructions</h4>",
        "Convert the switch statement into a lookup table called <code>lookup</code>. Use it to lookup <code>val</code> and assign the associated string to the <code>result</code> variable."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "function phoneticLookup(val) {",
        "  var result = \"\";",
        "",
        "  // Only change code below this line",
        "  switch(val) {",
        "    case \"alpha\": ",
        "      result = \"Adams\";",
        "      break;",
        "    case \"bravo\": ",
        "      result = \"Boston\";",
        "      break;",
        "    case \"charlie\": ",
        "      result = \"Chicago\";",
        "      break;",
        "    case \"delta\": ",
        "      result = \"Denver\";",
        "      break;",
        "    case \"echo\": ",
        "      result = \"Easy\";",
        "      break;",
        "    case \"foxtrot\": ",
        "      result = \"Frank\";",
        "  }",
        "",
        "  // Only change code above this line",
        "  return result;",
        "}",
        "",
        "// Change this value to test",
        "phoneticLookup(\"charlie\");"
      ],
      "solutions": [
        "function phoneticLookup(val) {\n  var result = \"\";\n\n  var lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
      ],
      "tests": [
        "assert(phoneticLookup(\"alpha\") === 'Adams', 'message: <code>phoneticLookup(\"alpha\")</code> should equal <code>\"Adams\"</code>');",
        "assert(phoneticLookup(\"bravo\") === 'Boston', 'message: <code>phoneticLookup(\"bravo\")</code> should equal <code>\"Boston\"</code>');",
        "assert(phoneticLookup(\"charlie\") === 'Chicago', 'message: <code>phoneticLookup(\"charlie\")</code> should equal <code>\"Chicago\"</code>');",
        "assert(phoneticLookup(\"delta\") === 'Denver', 'message: <code>phoneticLookup(\"delta\")</code> should equal <code>\"Denver\"</code>');",
        "assert(phoneticLookup(\"echo\") === 'Easy', 'message: <code>phoneticLookup(\"echo\")</code> should equal <code>\"Easy\"</code>');",
        "assert(phoneticLookup(\"foxtrot\") === 'Frank', 'message: <code>phoneticLookup(\"foxtrot\")</code> should equal <code>\"Frank\"</code>');",
        "assert(typeof phoneticLookup(\"\") === 'undefined', 'message: <code>phoneticLookup(\"\")</code> should equal <code>undefined</code>');",
        "assert(!/case|switch|if/g.test(code), 'message: You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements'); "
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "567af2437cbaa8c51670a16c",
      "title": "Testing Objects for Properties",
      "description": [
        "Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.",
        "<strong>Example</strong>",
        "<blockquote>var myObj = {<br>  top: \"hat\",<br>  bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>",
        "<h4>Instructions</h4>",
        "Modify the function <code>checkObj</code> to test <code>myObj</code> for <code>checkProp</code>. If the property is found, return that property's value. If not, return <code>\"Not Found\"</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var myObj = {",
        "  gift: \"pony\",",
        "  pet: \"kitten\",",
        "  bed: \"sleigh\"",
        "};",
        "",
        "function checkObj(checkProp) {",
        "  // Your Code Here",
        "  ",
        "  return \"Change Me!\";",
        "}",
        "",
        "// Test your code by modifying these values",
        "checkObj(\"gift\");"
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "var myObj = {\n  gift: \"pony\",\n  pet: \"kitten\",\n  bed: \"sleigh\"\n};\nfunction checkObj(checkProp) {\n  if(myObj.hasOwnProperty(checkProp)) {\n    return myObj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"
      ],
      "tests": [
        "assert(checkObj(\"gift\") === \"pony\", 'message: <code>checkObj(\"gift\")</code> should return  <code>\"pony\"</code>.');",
        "assert(checkObj(\"pet\") === \"kitten\", 'message: <code>checkObj(\"pet\")</code> should return  <code>\"kitten\"</code>.');",
        "assert(checkObj(\"house\") === \"Not Found\", 'message: <code>checkObj(\"house\")</code> should return  <code>\"Not Found\"</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cb",
      "title": "Introducing JavaScript Object Notation (JSON)",
      "description": [
        "JavaScript Object Notation or <code>JSON</code> uses the format of JavaScript Objects to store data. JSON is flexible because it allows for <dfn>Data Structures</dfn> with arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, and <dfn>objects</dfn>.",
        "Here is an example of a JSON object:",
        "<blockquote>var ourMusic = [<br>  {<br>    \"artist\": \"Daft Punk\",<br>    \"title\": \"Homework\",<br>    \"release_year\": 1997,<br>    \"formats\": [ <br>      \"CD\", <br>      \"Cassette\", <br>      \"LP\" ],<br>    \"gold\": true<br>  }<br>];</blockquote>",
        "This is an array of objects and the object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>formats</code> array. Additional album records could be added to the top level array.",
        "<strong>Note</strong><br>You will need a comma in between objects in JSON objects with more than one object in the array.",
        "<h4>Instructions</h4>",
        "Add a new album to the <code>myMusic</code> JSON object. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "var myMusic = [",
        "  {",
        "    \"artist\": \"Billy Joel\",",
        "    \"title\": \"Piano Man\",",
        "    \"release_year\": 1973,",
        "    \"formats\": [ ",
        "      \"CS\", ",
        "      \"8T\", ",
        "      \"LP\" ],",
        "    \"gold\": true",
        "  }",
        "  // Add record here",
        "];",
        ""
      ],
      "tail": [
        "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);"
      ],
      "solutions": [
        "var myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\" ],\n    \"gold\": true\n  }, \n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [ \n      \"CS\", \n      \"8T\", \n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
      ],
      "tests": [
        "assert(Array.isArray(myMusic), 'message: <code>myMusic</code> should be an array');",
        "assert(myMusic.length > 1, 'message: <code>myMusic</code> should have at least two elements');",
        "assert(typeof myMusic[1] === 'object', 'message: <code>myMusic[1]</code> should be an object');",
        "assert(Object.keys(myMusic[1]).length > 3, 'message: <code>myMusic[1]</code> should have at least 4 properties');",
        "assert(myMusic[1].hasOwnProperty('artist') && typeof myMusic[1].artist === 'string', 'message: <code>myMusic[1]</code> should contain an <code>artist</code> property which is a string');",
        "assert(myMusic[1].hasOwnProperty('title') && typeof myMusic[1].title === 'string', 'message: <code>myMusic[1]</code> should  contain a <code>title</code> property which is a string');",
        "assert(myMusic[1].hasOwnProperty('release_year') && typeof myMusic[1].release_year === 'number', 'message: <code>myMusic[1]</code> should contain a <code>release_year</code> property which is a number');",
        "assert(myMusic[1].hasOwnProperty('formats') && Array.isArray(myMusic[1].formats), 'message: <code>myMusic[1]</code> should contain a <code>formats</code> property which is an array');",
        "assert(myMusic[1].formats.every(function(item) { return (typeof item === \"string\")}) && myMusic[1].formats.length > 1, 'message: <code>formats</code> should be an array of strings with at least two elements');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cc",
      "title": "Accessing Nested Objects in JSON",
      "description": [
        "The properties and sub-properties of JSON objects can be accessed by chaining together the dot or bracket notation.",
        "Here is a nested JSON Object:",
        "<blockquote>var ourStorage = {<br>  \"desk\": {<br>    \"drawer\": \"stapler\"<br>  },<br>  \"cabinet\": {<br>    \"top drawer\": { <br>      \"folder1\": \"a file\",<br>      \"folder2\": \"secrets\"<br>    },<br>    \"bottom drawer\": \"soda\"<br>  }<br>}<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>",
        "<h4>Instructions</h4>",
        "Access the <code>myStorage</code> JSON object to retrieve the contents of the <code>glove box</code>. Use bracket notation for properties with a space in their name."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var myStorage = {",
        "  \"car\": {",
        "    \"inside\": {",
        "      \"glove box\": \"maps\",",
        "      \"passenger seat\": \"crumbs\"",
        "     },",
        "    \"outside\": {",
        "      \"trunk\": \"jack\"",
        "    }",
        "  }",
        "};",
        "",
        "// Only change code below this line",
        "",
        "var gloveBoxContents = \"\"; // Change this line",
        ""
      ],
      "tail": [
        "(function(x) { ",
        "  if(typeof x != 'undefined') { ",
        "    return \"gloveBoxContents = \" + x;",
        "  }",
        "  return \"gloveBoxContents is undefined\";",
        "})(gloveBoxContents);"
      ],
      "solutions": [
        "var myStorage = {  \n  \"car\":{  \n    \"inside\":{  \n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{  \n      \"trunk\":\"jack\"\n    }\n  }\n};\nvar gloveBoxContents = myStorage.car.inside[\"glove box\"];"
      ],
      "tests": [
        "assert(gloveBoxContents === \"maps\", 'message: <code>gloveBoxContents</code> should equal \"maps\"');",
        "assert(/=\\s*myStorage\\.car\\.inside\\[(\"|')glove box\\1\\]/g.test(code), 'message: Use dot and bracket notation to access <code>myStorage</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cd",
      "title": "Accessing Nested Arrays in JSON",
      "description": [
        "As we have seen in earlier examples, JSON objects can contain both nested objects and nested arrays. Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.",
        "Here is an example of how to access a nested array:",
        "<blockquote>var ourPets = { <br>  \"cats\": [<br>    \"Meowzer\",<br>    \"Fluffy\",<br>    \"Kit-Cat\"<br>  ],<br>  \"dogs\": [<br>    \"Spot\",<br>    \"Bowser\",<br>    \"Frankie\"<br>  ]<br>};<br>ourPets.cats[1]; // \"Fluffy\"<br>ourPets.dogs[0]; // \"Spot\"</blockquote>",
        "<h4>Instructions</h4>",
        "Retrieve the second tree from the variable <code>myPlants</code> using object dot and array bracket notation."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var myPlants = [",
        "  { ",
        "    type: \"flowers\",",
        "    list: [",
        "      \"rose\",",
        "      \"tulip\",",
        "      \"dandelion\"",
        "    ]",
        "  },",
        "  {",
        "    type: \"trees\",",
        "    list: [",
        "      \"fir\",",
        "      \"pine\",",
        "      \"birch\"",
        "    ]",
        "  }  ",
        "];",
        "",
        "// Only change code below this line",
        "",
        "var secondTree = \"\"; // Change this line",
        ""
      ],
      "tail": [
        "(function(x) { ",
        "  if(typeof x != 'undefined') { ",
        "    return \"secondTree = \" + x;",
        "  }",
        "  return \"secondTree is undefined\";",
        "})(secondTree);"
      ],
      "solutions": [
        "var myPlants = [\n  { \n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }  \n];\n\n// Only change code below this line\n\nvar secondTree = myPlants[1].list[1];"
      ],
      "tests": [
        "assert(secondTree === \"pine\", 'message: <code>secondTree</code> should equal \"pine\"');",
        "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code), 'message: Use dot and bracket notation to access <code>myPlants</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244cf",
      "title": "Record Collection",
      "description": [
        "You are given a JSON object representing (a small part of) your record collection. Each album is identified by a unique id number and has several properties. Not all albums have complete information.",
        "Write a function which takes an <code>id</code>, a property (<code>prop</code>), and a <code>value</code>.",
        "For the given <code>id</code> in <code>collection</code>:",
        "If <code>value</code> is non-blank (<code>value !== \"\"</code>) and <code>prop</code> is not <code>\"tracks\"</code> then update or set the <code>value</code> for the <code>prop</code>.",
        "If the <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> is non-blank, push the <code>value</code> onto the end of the <code>tracks</code> array.",
        "If <code>value</code> is blank, delete that <code>prop</code>.",
        "Always return the entire collection object.",
        "<strong>Note</strong><br>Don't forget to use <code>bracket notation</code> when <a href=\"accessing-objects-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Setup",
        "var collection = {",
        "    2548: {",
        "      album: \"Slippery When Wet\",",
        "      artist: \"Bon Jovi\",",
        "      tracks: [ ",
        "        \"Let It Rock\", ",
        "        \"You Give Love a Bad Name\" ",
        "      ]",
        "    },",
        "    2468: {",
        "      album: \"1999\",",
        "      artist: \"Prince\",",
        "      tracks: [ ",
        "        \"1999\", ",
        "        \"Little Red Corvette\" ",
        "      ]",
        "    },",
        "    1245: {",
        "      artist: \"Robert Palmer\",",
        "      tracks: [ ]",
        "    },",
        "    5439: {",
        "      album: \"ABBA Gold\"",
        "    }",
        "};",
        "// Keep a copy of the collection for tests",
        "var collectionCopy = JSON.parse(JSON.stringify(collection));",
        "",
        "// Only change code below this line",
        "function update(id, prop, value) {",
        "",
        "",
        "  return collection;",
        "}",
        "",
        "// Alter values below to test your code",
        "update(5439, \"artist\", \"ABBA\");",
        ""
      ],
      "tail": [
        "(function(x) { return \"collection = \\n\" + JSON.stringify(x, '\\n', 2); })(collection);"
      ],
      "solutions": [
        "var collection = {\n    2548: {\n      album: \"Slippery When Wet\",\n      artist: \"Bon Jovi\",\n      tracks: [ \n        \"Let It Rock\", \n        \"You Give Love a Bad Name\" \n      ]\n    },\n    2468: {\n      album: \"1999\",\n      artist: \"Prince\",\n      tracks: [ \n        \"1999\", \n        \"Little Red Corvette\" \n      ]\n    },\n    1245: {\n      artist: \"Robert Palmer\",\n      tracks: [ ]\n    },\n    5439: {\n      album: \"ABBA Gold\"\n    }\n};\n// Keep a copy of the collection for tests\nvar collectionCopy = JSON.parse(JSON.stringify(collection));\n\n// Only change code below this line\nfunction update(id, prop, value) {\n  if(value !== \"\") {\n    if(prop === \"tracks\") {\n      collection[id][prop].push(value);\n    } else {\n      collection[id][prop] = value;\n    }\n  } else {\n    delete collection[id][prop];\n  }\n\n  return collection;\n}"
      ],
      "tests": [
        "collection = collectionCopy; assert(update(5439, \"artist\", \"ABBA\")[5439][\"artist\"] === \"ABBA\", 'message: After <code>update(5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be <code>\"ABBA\"</code>');",
        "update(2548, \"artist\", \"\"); assert(!collection[2548].hasOwnProperty(\"artist\"), 'message: After <code>update(2548, \"artist\", \"\")</code>, <code>artist</code> should not be set');",
        "assert(update(1245, \"tracks\", \"Addicted to Love\")[1245][\"tracks\"].pop() === \"Addicted to Love\", 'message: After <code>update(1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have <code>\"Addicted to Love\"</code> as the last element.');",
        "update(2548, \"tracks\", \"\"); assert(!collection[2548].hasOwnProperty(\"tracks\"), 'message: After <code>update(2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb5bdef",
      "title": "Iterate with JavaScript For Loops",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "The most common type of JavaScript loop is called a \"<code>for loop</code>\" because it runs \"for\" a specific number of times.",
        "For loops are declared with three optional expressions separated by semicolons:",
        "<code>for ([initialization]; [condition]; [final-expression])</code>",
        "The <code>initialization</code> statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.",
        "The <code>condition</code> statement is evaluated at the beginning of every loop iteration and will continue as long as it evalutes to <code>true</code>. When <code>condition</code> is <code>false</code> at the start of the iteration, the loop will stop executing. This means if <code>condition</code> starts as <code>false</code>, your loop will never execute.",
        "The <code>final-expression</code> is executed at the end of each loop iteration, prior to the next <code>condition</code> check and is usually used to increment or decrement your loop counter.",
        "In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i < 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our <code>final-expression</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i < 5; i++) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,1,2,3,4]</code>.",
        "<h4>Instructions</h4>",
        "Use a <code>for</code> loop to work to push the values 1 through 5 onto <code>myArray</code>."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [];",
        "",
        "for (var i = 0; i < 5; i++) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// Setup",
        "var myArray = [];",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 6; i++) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: You should be using a <code>for</code> loop for this.');",
        "assert.deepEqual(myArray, [1,2,3,4,5], 'message: <code>myArray</code> should equal <code>[1,2,3,4,5]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56104e9e514f539506016a5c",
      "title": "Iterate Odd Numbers With a For Loop",
      "description": [
        "For loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.",
        "We'll start at <code>i = 0</code> and loop while <code>i < 10</code>. We'll increment <code>i</code> by 2 each loop with <code>i += 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i = 0; i < 10; i += 2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[0,2,4,6,8]</code>.",
        "Let's change our <code>initialization</code> so we can count by odd numbers.",
        "<h4>Instructions</h4>",
        "Push the odd numbers from 1 through 9 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [];",
        "",
        "for (var i = 0; i < 10; i += 2) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// Setup",
        "var myArray = [];",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: You should be using a <code>for</code> loop for this.');",
        "assert.deepEqual(myArray, [1,3,5,7,9], 'message: <code>myArray</code> should equal <code>[1,3,5,7,9]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56105e7b514f539506016a5e",
      "title": "Count Backwards With a For Loop",
      "description": [
        "A for loop can also count backwards, so long as we can define the right conditions.",
        "In order to count backwards by twos, we'll need to change our <code>initialization</code>, <code>condition</code>, and <code>final-expression</code>.",
        "We'll start at <code>i = 10</code> and loop while <code>i > 0</code>. We'll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.",
        "<blockquote>var ourArray = [];<br>for (var i=10; i > 0; i-=2) {<br>  ourArray.push(i);<br>}</blockquote>",
        "<code>ourArray</code> will now contain <code>[10,8,6,4,2]</code>.",
        "Let's change our <code>initialization</code> and <code>final-expression</code> so we can count backward by twos by odd numbers.",
        "<h4>Instructions</h4>",
        "Push the odd numbers from 9 through 1 to <code>myArray</code> using a <code>for</code> loop."
      ],
      "challengeSeed": [
        "// Example",
        "var ourArray = [];",
        "",
        "for (var i = 10; i > 0; i -= 2) {",
        "  ourArray.push(i);",
        "}",
        "",
        "// Setup",
        "var myArray = [];",
        "",
        "// Only change code below this line.",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var ourArray = [];\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\nvar myArray = [];\nfor (var i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"
      ],
      "tests": [
        "assert(code.match(/for\\s*\\(/g).length > 1, 'message: You should be using a <code>for</code> loop for this.');",
        "assert.deepEqual(myArray, [9,7,5,3,1], 'message: <code>myArray</code> should equal <code>[9,7,5,3,1]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5675e877dbd60be8ad28edc6",
      "title": "Iterate Through an Array with a For Loop",
      "description": [
        "A common task in Javascript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:",
        "<blockquote>var arr = [10,9,8,7,6];<br>for (var i=0; i < arr.length; i++) {<br>   console.log(arr[i]);<br>}</blockquote>",
        "Remember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our <dfn>condition</dfn> for this loop is <code>i < arr.length</code>, which stops when <code>i</code> is at length - 1.",
        "<h4>Instructions</h4>",
        "Declare and initialize a variable <code>total</code> to <code>0</code>. Use a <code>for</code> loop to add the value of each element of the <code>myArr</code> array to <code>total</code>."
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "// Example",
        "var ourArr = [ 9, 10, 11, 12];",
        "var ourTotal = 0;",
        "",
        "for (var i = 0; i < ourArr.length; i++) {",
        "  ourTotal += ourArr[i];",
        "}",
        "",
        "// Setup",
        "var myArr = [ 2, 3, 4, 5, 6];",
        "",
        "// Only change code below this line",
        "",
        ""
      ],
      "tail": [
        "(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()"
      ],
      "solutions": [
        "var ourArr = [ 9, 10, 11, 12];\nvar ourTotal = 0;\n\nfor (var i = 0; i < ourArr.length; i++) {\n  ourTotal += ourArr[i];\n}\n\nvar myArr = [ 2, 3, 4, 5, 6];\nvar total = 0;\n\nfor (var i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"
      ],
      "tests": [
        "assert(code.match(/var\\s*total\\s*=\\s*0\\s*;/), 'message: <code>total</code> should be declared and initialized to 0');",
        "assert(total === 20, 'message: <code>total</code> should equal 20');",
        "assert(code.match(/for\\s*\\(/g).length > 1 && code.match(/myArr\\s*\\[/), 'message: You should use a <code>for</code> loop to iterate through <code>myArr</code>');",
        "assert(!code.match(/total[\\s\\+\\-]*=\\s*(\\d(?!\\s*;)|[1-9])/g), 'message: Do not set <code>total</code> to 20 directly');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "56533eb9ac21ba0edf2244e1",
      "title": "Nesting For Loops",
      "description": [
        "If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:",
        "<blockquote>var arr = [<br>  [1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>  for (var j=0; j &lt; arr[i].length; j++) {<br>    console.log(arr[i][j]);<br>  }<br>}</blockquote>",
        "This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.",
        "<h4>Instructions</h4>",
        "Modify function <code>multiplyAll</code> so that it multiplies the <code>product</code> variable by each number in the sub-arrays of <code>arr</code>"
      ],
      "releasedOn": "January 1, 2016",
      "challengeSeed": [
        "function multiplyAll(arr) {",
        "  var product = 1;",
        "  // Only change code below this line",
        "  ",
        "  // Only change code above this line",
        "  return product;",
        "}",
        "",
        "// Modify values below to test your code",
        "multiplyAll([[1,2],[3,4],[5,6,7]]);",
        ""
      ],
      "tail": [
        ""
      ],
      "solutions": [
        "function multiplyAll(arr) {\n  var product = 1;\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}\n\nmultiplyAll([[1,2],[3,4],[5,6,7]]);"
      ],
      "tests": [
        "assert(multiplyAll([[1],[2],[3]]) === 6, 'message: <code>multiplyAll([[1],[2],[3]]);</code> should return <code>6</code>');",
        "assert(multiplyAll([[1,2],[3,4],[5,6,7]]) === 5040, 'message: <code>multiplyAll([[1,2],[3,4],[5,6,7]])</code> should return <code>5040</code>');",
        "assert(multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) === 54, 'message: <code>multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]);)</code> should return <code>54</code>');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb1bdef",
      "title": "Iterate with JavaScript While Loops",
      "description": [
        "You can run the same code multiple times by using a loop.",
        "Another type of JavaScript loop is called a \"<code>while loop</code>\", because it runs \"while\" a specified condition is true and stops once that condition is no longer true.",
        "<blockquote>var ourArray = [];<br>var i = 0;<br>while(i < 5) {<br>  ourArray.push(i);<br>  i++;<br>}</blockquote>",
        "Let's try getting a while loop to work by pushing values to an array.",
        "<h4>Instructions</h4>",
        "Push the numbers 0 through 4 to <code>myArray</code> using a <code>while</code> loop."
      ],
      "challengeSeed": [
        "// Setup",
        "var myArray = [];",
        "",
        "// Only change code below this line.",
        "",
        ""
      ],
      "tail": [
        "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}"
      ],
      "solutions": [
        "var myArray = [];\nvar i = 0;\nwhile(i < 5) {\n  myArray.push(i);\n  i++;\n}"
      ],
      "tests": [
        "assert(code.match(/while/g), 'message: You should be using a <code>while</code> loop for this.');",
        "assert.deepEqual(myArray, [0,1,2,3,4], 'message: <code>myArray</code> should equal <code>[0,1,2,3,4]</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "5688e62ea601b2482ff8422b",
      "title": "Profile Lookup",
      "description": [
        "We have an array of objects representing different people in our contacts lists.",
        "A <code>lookUp</code> function that takes <code>firstName</code> and a property (<code>prop</code>) as arguments has been pre-written for you.",
        "The function should check if <code>firstName</code> is an actual contact's <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.",
        "If both are true, then return the \"value\" of that property.",
        "If <code>firstName</code> does not correspond to any contacts then return <code>\"No such contact\"</code>",
        "If <code>prop</code> does not correspond to any valid properties then return <code>\"No such property\"</code>",
        ""
      ],
      "releasedOn": "January 8, 2016",
      "challengeSeed": [
        "//Setup",
        "var contacts = [",
        "    {",
        "        \"firstName\": \"Akira\",",
        "        \"lastName\": \"Laine\",",
        "        \"number\": \"0543236543\",",
        "        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Harry\",",
        "        \"lastName\": \"Potter\",",
        "        \"number\": \"0994372684\",",
        "        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Sherlock\",",
        "        \"lastName\": \"Holmes\",",
        "        \"number\": \"0487345643\",",
        "        \"likes\": [\"Intriguing Cases\", \"Violin\"]",
        "    },",
        "    {",
        "        \"firstName\": \"Kristian\",",
        "        \"lastName\": \"Vos\",",
        "        \"number\": \"unknown\",",
        "        \"likes\": [\"Javascript\", \"Gaming\", \"Foxes\"]",
        "    }",
        "];",
        "",
        "",
        "function lookUp(firstName, prop){",
        "// Only change code below this line",
        "",
        "// Only change code above this line",
        "}",
        "",
        "// Change these values to test your function",
        "lookUp(\"Akira\", \"likes\");"
      ],
      "solutions": [
        "var contacts = [\n    {\n        \"firstName\": \"Akira\",\n        \"lastName\": \"Laine\",\n        \"number\": \"0543236543\",\n        \"likes\": [\"Pizza\", \"Coding\", \"Brownie Points\"]\n    },\n    {\n        \"firstName\": \"Harry\",\n        \"lastName\": \"Potter\",\n        \"number\": \"0994372684\",\n        \"likes\": [\"Hogwarts\", \"Magic\", \"Hagrid\"]\n    },\n    {\n        \"firstName\": \"Sherlock\",\n        \"lastName\": \"Holmes\",\n        \"number\": \"0487345643\",\n        \"likes\": [\"Intriguing Cases\", \"Violin\"]\n    },\n    {\n        \"firstName\": \"Kristian\",\n        \"lastName\": \"Vos\",\n        \"number\": \"unknown\",\n        \"likes\": [\"Javascript\", \"Gaming\", \"Foxes\"]\n    },\n];\n\n\n//Write your function in between these comments\nfunction lookUp(name, prop){\n    for(var i in contacts){\n      if(contacts[i].firstName === name) {\n        return contacts[i][prop] || \"No such property\";\n      }\n    }\n   return \"No such contact\";\n}\n//Write your function in between these comments\n\nlookUp(\"Akira\", \"likes\");"
      ],
      "tests": [
        "assert(lookUp('Kristian','lastName') === \"Vos\", 'message: <code>\"Kristian\", \"lastName\"</code> should return <code>\"Vos\"</code>');",
        "assert.deepEqual(lookUp(\"Sherlock\", \"likes\"), [\"Intriguing Cases\", \"Violin\"], 'message: <code>\"Sherlock\", \"likes\"</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code>');",
        "assert(typeof lookUp(\"Harry\", \"likes\") === \"object\", 'message: <code>\"Harry\",\"likes\"</code> should return an array');",
        "assert(lookUp(\"Bob\", \"number\") === \"No such contact\", 'message: <code>\"Bob\", \"number\"</code> should return \"No such contact\"');",
        "assert(lookUp(\"Akira\", \"address\") === \"No such property\", 'message: <code>\"Akira\", \"address\"</code> should return \"No such property\"');"
      ],
      "type": "checkpoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c11feddfaeb9bdef",
      "title": "Generate Random Fractions with JavaScript",
      "description": [
        "Random numbers are useful for creating random behavior.",
        "JavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and not quite up to <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never quite return a <code>1</code>",
        "<strong>Note</strong><br>Like <a href='waypoint-storing-values-with-the-equal-operator' target='_blank'>Storing Values with the Equal Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can simply <code>return</code> the value of the <code>Math.random()</code> function.",
        "<h4>Instructions</h4>",
        "Change <code>myFunction</code> to return a random number instead of returning <code>0</code>."
      ],
      "challengeSeed": [
        "function myFunction() {",
        "",
        "  // Only change code below this line.",
        "",
        "  return 0;",
        "",
        "  // Only change code above this line.",
        "}"
      ],
      "tail": [
        "(function(){return myFunction();})();"
      ],
      "solutions": [
        "function myFunction() {\n  return Math.random();\n}"
      ],
      "tests": [
        "assert(typeof myFunction() === \"number\", 'message: <code>myFunction</code> should return a random number.');",
        "assert((myFunction()+''). match(/\\./g), 'message: The number returned by <code>myFunction</code> should be a decimal.');",
        "assert(code.match(/Math\\.random/g).length >= 0, 'message: You should be using <code>Math.random</code> to generate the random decimal number.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb1bdef",
      "title": "Generate Random Whole Numbers with JavaScript",
      "description": [
        "It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.",
        "<ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol>",
        "Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.",
        "Putting everything together, this is what our code looks like:",
        "<code>Math.floor(Math.random() * 20);</code>",
        "We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.",
        "<h4>Instructions</h4>",
        "Use this technique to generate and return a random whole number between <code>0</code> and <code>9</code>."
      ],
      "challengeSeed": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);",
        "",
        "function myFunction() {",
        "",
        "  // Only change code below this line.",
        "",
        "  return Math.random();",
        "}"
      ],
      "tail": [
        "(function(){return myFunction();})();"
      ],
      "solutions": [
        "var randomNumberBetween0and19 = Math.floor(Math.random() * 20);\n\nfunction myFunction() {\n  return Math.floor(Math.random() * 10);\n}"
      ],
      "tests": [
        "assert(typeof myFunction() === \"number\" && (function(){var r = myFunction();return Math.floor(r) === r;})(), 'message: The result of <code>myFunction</code> should be a whole number.');",
        "assert(code.match(/Math.random/g).length > 1, 'message: You should be using <code>Math.random</code> to generate a random number.');",
        "assert(code.match(/\\(\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10\\s*?\\)/g) || code.match(/\\(\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\)/g), 'message: You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.');",
        "assert(code.match(/Math.floor/g).length > 1, 'message: You should use <code>Math.floor</code> to remove the decimal part of the number.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb2bdef",
      "title": "Generate Random Whole Numbers within a Range",
      "description": [
        "Instead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.",
        "To do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.",
        "Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:",
        "<code>Math.floor(Math.random() * (max - min + 1)) + min</code>",
        "<h4>Instructions</h4>",
        "Create a function called <code>randomRange</code> that takes a range <code>myMin</code> and <code>myMax</code> and returns a random number that's greater than or equal to <code>myMin</code>, and is less than or equal to <code>myMax</code>, inclusive."
      ],
      "challengeSeed": [
        "// Example",
        "function ourFunction(ourMin, ourMax) {",
        "",
        "  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;",
        "}",
        "",
        "ourFunction(1, 9);",
        "",
        "// Only change code below this line.",
        "",
        "function randomRange(myMin, myMax) {",
        "",
        "  return 0; // Change this line",
        "",
        "}",
        "",
        "// Change these values to test your function",
        "var myRandom = randomRange(5, 15);"
      ],
      "tail": [
        "var calcMin = 100;",
        "var calcMax = -100;",
        "for(var i = 0; i < 100; i++) {",
        "  var result = randomRange(5,15);",
        "  calcMin = Math.min(calcMin, result);",
        "  calcMax = Math.max(calcMax, result);",
        "}",
        "(function(){",
        "  if(typeof myRandom === 'number') {",
        "    return \"myRandom = \" + myRandom;",
        "  } else {",
        "    return \"myRandom undefined\";",
        "  }",
        "})();"
      ],
      "solutions": [
        "function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"
      ],
      "tests": [
        "assert(calcMin === 5, 'message: The random number generated by <code>randomRange</code> should be greater than or equal to your minimum number, <code>myMin</code>.');",
        "assert(calcMax === 15, 'message: The random number generated by <code>randomRange</code> should be less than or equal to your maximum number, <code>myMax</code>.');",
        "assert(randomRange(0,1) % 1 === 0 , 'message: The random number generated by <code>randomRange</code> should be an integer, not a decimal.');",
        "assert((function(){if(code.match(/myMax/g).length > 1 && code.match(/myMin/g).length > 2 && code.match(/Math.floor/g) && code.match(/Math.random/g)){return true;}else{return false;}})(), 'message: <code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb6bdef",
      "title": "Sift through Text with Regular Expressions",
      "description": [
        "<code>Regular expressions</code> are used to find certain words or patterns inside of <code>strings</code>.",
        "For example, if we wanted to find the word <code>the</code> in the string <code>The dog chased the cat</code>, we could use the following <code>regular expression</code>: <code>/the/gi</code>",
        "Let's break this down a bit:",
        "<code>/</code> is the start of the regular expression.",
        "<code>the</code> is the pattern we want to match.",
        "<code>/</code> is the end of the regular expression.",
        "<code>g</code> means <code>global</code>, which causes the pattern to return all matches in the string, not just the first one.",
        "<code>i</code> means that we want to ignore the case (uppercase or lowercase) when searching for the pattern.",
        "<h4>Instructions</h4>",
        "Select all the occurrences of the word <code>and</code> in <code>testString</code>.",
        "You can do this by replacing the <code>.</code> part of the regular expression with the word <code>and</code>."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";",
        "",
        "// Example",
        "var expressionToGetSoftware = /software/gi;",
        "var softwareCount = testString.match(expressionToGetSoftware).length;",
        "  ",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /./gi;  // Change this Line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var andCount = testString.match(expression).length;",
        ""
      ],
      "tail": [
        "(function(){return andCount;})();"
      ],
      "solutions": [
        "var testString = \"Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.\";\nvar expression = /and/gi;  // Change this Line\nvar andCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(andCount==2, 'message: Your <code>regular expression</code> should find two occurrences of the word <code>and</code>.');",
        "assert(code.match(/\\/and\\/gi/), 'message: Use <code>regular expressions</code> to find the word <code>and</code> in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb7bdef",
      "title": "Find Numbers with Regular Expressions",
      "description": [
        "We can use special selectors in <dfn>Regular Expressions</dfn> to select a particular type of value.",
        "One such selector is the digit selector <code>\\d</code> which is used to retrieve one digit (e.g. numbers 0 to 9) in a string.",
        "In JavaScript, it is used like this: <code>/\\d/g</code>.",
        "Appending a plus sign (<code>+</code>) after the selector, e.g. <code>/\\d+/g</code>, allows this regular expression to match one or more digits.",
        "The trailing <code>g</code> is short for 'global', which allows this regular expression to find all matches rather than stop at the first match.",
        "<h4>Instructions</h4>",
        "Use the <code>\\d</code> selector to select the number of numbers in the string, allowing for the possibility of one or more digit."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"There are 3 cats but 4 dogs.\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var digitCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return digitCount;})();"
      ],
      "solutions": [
        "var testString = \"There are 3 cats but 4 dogs.\";\nvar expression = /\\d+/g;  // Change this line\nvar digitCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(digitCount === 2, 'message: Your regular expression should find two numbers in <code>testString</code>.');",
        "assert(code.match(/\\/\\\\d\\+\\//g), 'message: Use the <code>/\\d+/g</code> regular expression to find the numbers in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb8bdef",
      "title": "Find Whitespace with Regular Expressions",
      "description": [
        "We can also use regular expression selectors like <code>\\s</code> to find whitespace in a string.",
        "The whitespace characters are <code>\" \"</code> (space), <code>\\r</code> (the carriage return), <code>\\n</code> (newline), <code>\\t</code> (tab), and <code>\\f</code> (the form feed).",
        "The whitespace regular expression looks like this:",
        "<code>/\\s+/g</code>",
        "<h4>Instructions</h4>",
        "Use <code>\\s</code> to select all the whitespace characters in the sentence string."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"How many spaces are there in this sentence?\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var spaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return spaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many spaces are there in this sentence?\";\nvar expression = /\\s+/g;  // Change this line\nvar spaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(spaceCount === 7, 'message: Your regular expression should find seven spaces in <code>testString</code>.');",
        "assert(code.match(/\\/\\\\s\\+\\//g), 'message: Use the <code>/\\s+/g</code> regular expression to find the spaces in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c13feddfaeb3bdef",
      "title": "Invert Regular Expression Matches with JavaScript",
      "description": [
        "You can invert any match by using the uppercase version of the regular expression selector.",
        "For example, <code>\\s</code> will match any whitespace, and <code>\\S</code> will match anything that isn't whitespace.",
        "<h4>Instructions</h4>",
        "Use <code>/\\S/g</code> to count the number of non-whitespace characters in <code>testString</code>."
      ],
      "head": [
        ""
      ],
      "challengeSeed": [
        "// Setup",
        "var testString = \"How many non-space characters are there in this sentence?\";",
        "",
        "// Only change code below this line.",
        "",
        "var expression = /.+/g;  // Change this line",
        "",
        "// Only change code above this line",
        "",
        "// This code counts the matches of expression in testString",
        "var nonSpaceCount = testString.match(expression).length;"
      ],
      "tail": [
        "(function(){return nonSpaceCount;})();"
      ],
      "solutions": [
        "var testString = \"How many non-space characters are there in this sentence?\";\nvar expression = /\\S/g;  \nvar nonSpaceCount = testString.match(expression).length;"
      ],
      "tests": [
        "assert(nonSpaceCount === 49, 'message: Your regular expression should find forty nine non-space characters in the <code>testString</code>.');",
        "assert(code.match(/\\/\\\\S\\/g/g), 'message: Use the <code>/\\S/g</code> regular expression to find non-space characters in <code>testString</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1
    },
    {
      "id": "cf1111c1c12feddfaeb9bdef",
      "title": "Create a JavaScript Slot Machine",
      "description": [
        "We are now going to try and combine some of the stuff we've just learned and create the logic for a slot machine game.",
        "For this we will need to generate three random numbers between <code>1</code> and <code>3</code> to represent the possible values of each individual slot.",
        "Store the three random numbers in <code>slotOne</code>, <code>slotTwo</code> and <code>slotThree</code>.",
        "Generate the random numbers by using the system we used earlier (an explanation of the formula can be found <a href='https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/Waypoint-Generate-Random-Whole-Numbers-within-a-Range#explanation' target='_blank'>here</a>):",
        "<code>Math.floor(Math.random() * (3 - 1 + 1)) + 1;</code>"
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "   ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "   ",
        "    // Only change code below this line.",
        "    ",
        "    ",
        "    ",
        "    // Only change code above this line.",
        "    ",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined) {",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    ",
        "    $(\".logger\").append(\" Not A Win\")",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg.gz\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert(typeof(runSlots($(\".slot\"))[0]) === \"number\" && runSlots($(\".slot\"))[0] > 0 && runSlots($(\".slot\"))[0] < 4, '<code>slotOne</code> should be a random number.')",
        "assert(typeof(runSlots($(\".slot\"))[1]) === \"number\" && runSlots($(\".slot\"))[1] > 0 && runSlots($(\".slot\"))[1] < 4, '<code>slotTwo</code> should be a random number.')",
        "assert(typeof(runSlots($(\".slot\"))[2]) === \"number\" && runSlots($(\".slot\"))[2] > 0 && runSlots($(\".slot\"))[2] < 4, '<code>slotThree</code> should be a random number.')",
        "assert((function(){if(editor.match(/Math\\.floor\\(\\s?Math\\.random\\(\\)\\s?\\*\\s?\\(\\s?3\\s?\\-\\s?1\\s?\\+\\s?1\\s?\\)\\s?\\)\\s?\\+\\s?1/gi) !== null){return editor.match(/slot.*?=.*?\\(.*?\\).*?/gi).length >= 3;}else{return false;}})(), 'You should have used <code>Math.floor(Math.random() * (3 - 1 + 1)) + 1;</code> three times to generate your random numbers.')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c13feddfaeb1bdef",
      "title": "Add your JavaScript Slot Machine Slots",
      "description": [
        "Now that our slots will each generate random numbers, we need to check whether they've all returned the same number.",
        "If they have, we should notify our user that they've won and we should return <code>null</code>.",
        "<code>null</code> is a JavaScript data structure that means nothing.",
        "The user wins when all the three numbers match. Let's create an <code>if statement</code> with multiple conditions in order to check whether all numbers are equal.",
        "<code>if (slotOne === slotTwo && slotTwo === slotThree){</code>",
        "<code>&nbsp;&nbsp;return null;</code>",
        "<code>}</code>",
        "Also, we need to show the user that he has won the game when he gets the same number in all the slots.",
        "If all three numbers match, we should also set the text <code>\"It's A Win\"</code> to the element with class <code>logger</code>."
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // Only change code below this line.",
        "    ",
        "    ",
        "    ",
        "    // Only change code above this line.",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $(\".logger\").append(\" Not A Win\");",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg.gz\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((function(){var data = runSlots();return data === null || data.toString().length === 1;})(), 'If all three of our random numbers are the same we should return that number. Otherwise we should return <code>null</code>.')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c13feddfaeb2bdef",
      "title": "Bring your JavaScript Slot Machine to Life",
      "description": [
        "Now we can detect a win. Let's get this slot machine working.",
        "Let's use the jQuery <code>selector</code> <code>$(\".slot\")</code> to select all of the slots.",
        "Once they are all selected, we can use <code>bracket notation</code> to access each individual slot:",
        "<code>$($(\".slot\")[0]).html(slotOne);</code>",
        "This jQuery will select the first slot and update it's HTML to display the correct number.",
        "Use the above selector to display each number in its corresponding slot."
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // Only change code below this line.",
        "    ",
        "    ",
        "    ",
        "    // Only change code above this line.",
        "    ",
        "    if (slotOne === slotTwo && slotTwo === slotThree) {",
        "      $(\".logger\").html(\" It's A Win\")",
        "      return null;",
        "    }",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $(\".logger\").append(\" Not A Win\");",
        "    ",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $(\".go\").click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = \"container inset\">",
        "   <div class = \"header inset\">",
        "     <img src=\"/images/freecodecamp_logo.svg.gz\" alt=\"learn to code JavaScript at Free Code Camp logo\" class=\"img-responsive nav-logo\">",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = \"slots inset\">",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "     <div class = \"slot inset\">",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = \"outset\">",
        "     <button class = \"go inset\">",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = \"foot inset\">",
        "     <span class = \"logger\"></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        "   text-align: center;",
        "   padding-top: 25px;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((function(){runSlots();if($($(\".slot\")[0]).html().replace(/\\s/gi, \"\") !== \"\" && $($(\".slot\")[1]).html().replace(/\\s/gi, \"\") !== \"\" && $($(\".slot\")[2]).html().replace(/\\s/gi, \"\") !== \"\"){return true;}else{return false;}})(), 'You should be displaying the result of the slot numbers in the corresponding slots.')",
        "assert((editor.match( /\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[\\d\\]\\s*?\\)/gi) && editor.match( /\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[\\d\\]\\s*?\\)/gi ).length >= 3 && editor.match( /\\.html\\(slotOne\\)/gi ) && editor.match( /\\.html\\(slotTwo\\)/gi ) && editor.match( /\\.html\\(slotThree\\)/gi )), 'You should have used the the selector given in the description to select each slot and assign it the value of <code>slotOne</code>&#44; <code>slotTwo</code> and <code>slotThree</code> respectively.')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    },
    {
      "id": "cf1111c1c11feddfaeb1bdff",
      "title": "Give your JavaScript Slot Machine some Stylish Images",
      "description": [
        "Now let's add some images to our slots.",
        "We've already set up the images for you in an array called <code>images</code>. We can use different indexes to grab each of these.",
        "Here's how we would set the first slot to show a different image depending on which number its random number generates:",
        "<code>$($('.slot')[0]).html('&lt;img src = \"' + images[slotOne-1] + '\"&gt;');</code>",
        "Set up all three slots like this, then click the \"Go\" button to play the slot machine."
      ],
      "challengeSeed": [
        "fccss",
        "  function runSlots() {",
        "    var slotOne;",
        "    var slotTwo;",
        "    var slotThree;",
        "    ",
        "    var images = [\"//i.imgur.com/9H17QFk.png\", \"//i.imgur.com/9RmpXTy.png\", \"//i.imgur.com/VJnmtt5.png\"];",
        "    ",
        "    slotOne = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotTwo = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    slotThree = Math.floor(Math.random() * (3 - 1 + 1)) + 1;",
        "    ",
        "    ",
        "    // Only change code below this line.",
        "    ",
        "    ",
        "    ",
        "    // Only change code above this line.",
        "    ",
        "    if (slotOne === slotTwo && slotTwo === slotThree) {",
        "      $('.logger').html(\"It's A Win\");",
        "      return null;",
        "    }",
        "    ",
        "    if (slotOne !== undefined && slotTwo !== undefined && slotThree !== undefined){",
        "      $(\".logger\").html(slotOne + \" \" + slotTwo + \" \" + slotThree);",
        "    }",
        "    ",
        "    $('.logger').append(\" Not A Win\");",
        "    ",
        "    return [slotOne, slotTwo, slotThree];",
        "  }",
        "",
        "  $(document).ready(function() {",
        "     $('.go').click(function() {",
        "       runSlots();",
        "     });",
        "   });",
        "fcces",
        " ",
        "<div>",
        " <div class = 'container inset'>",
        "   <div class = 'header inset'>",
        "     <img src='/images/freecodecamp_logo.svg.gz' alt='learn to code JavaScript at Free Code Camp logo' class='img-responsive nav-logo'>",
        "     <h2>FCC Slot Machine</h2>",
        "   </div>",
        "   <div class = 'slots inset'>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "     <div class = 'slot inset'>",
        "       ",
        "     </div>",
        "   </div>",
        "   <br/>",
        "   <div class = 'outset'>",
        "     <button class = 'go inset'>",
        "       Go",
        "     </button>",
        "   </div>",
        "   <br/>",
        "   <div class = 'foot inset'>",
        "     <span class = 'logger'></span>",
        "   </div>",
        " </div>",
        "</div>",
        "",
        "<style>",
        " .slot > img {",
        "  margin: 0!important;",
        "  height: 71px;",
        "  width: 50px;",
        " }",
        " .container {",
        "   background-color: #4a2b0f;",
        "   height: 400px;",
        "   width: 260px;",
        "   margin: 50px auto;",
        "   border-radius: 4px;",
        " }",
        " .header {",
        "   border: 2px solid #fff;",
        "   border-radius: 4px;",
        "   height: 55px;",
        "   margin: 14px auto;",
        "   background-color: #457f86",
        " }",
        " .header h2 {",
        "   height: 30px;",
        "   margin: auto;",
        " }",
        " .header h2 {",
        "   font-size: 14px;",
        "   margin: 0 0;",
        "   padding: 0;",
        "   color: #fff;",
        "   text-align: center;",
        " }",
        " .slots{",
        "   display: flex;",
        "   background-color: #457f86;",
        "   border-radius: 6px;",
        "   border: 2px solid #fff;",
        " }",
        " .slot{",
        "   flex: 1 0 auto;",
        "   background: white;",
        "   height: 75px;",
        "   width: 50px;",
        "   margin: 8px;",
        "   border: 2px solid #215f1e;",
        "   border-radius: 4px;",
        "   text-align: center;",
        " }",
        " .go {",
        "   width: 100%;",
        "   color: #fff;",
        "   background-color: #457f86;",
        "   border: 2px solid #fff;",
        "   border-radius: 2px;",
        "   box-sizing: none;",
        "   outline: none!important;",
        " }",
        " .foot {",
        "   height: 150px;",
        "   background-color: 457f86;",
        "   border: 2px solid #fff;",
        " }",
        " ",
        " .logger {",
        "   color: white;",
        "   margin: 10px;",
        " }",
        " ",
        " .outset {",
        "   -webkit-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "     box-shadow: 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        " ",
        " .inset {",
        "   -webkit-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   -moz-box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        "   box-shadow: inset 0px 0px 15px -2px rgba(0,0,0,0.75);",
        " }",
        "</style>"
      ],
      "solutions": [
        ""
      ],
      "tests": [
        "assert((editor.match(/\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[\\d\\]\\s*?\\)\\.html\\(\\s*?\\'\\<img\\s?src\\s?=\\s?\"\\'\\s?\\+\\s?images\\[\\w+\\s*\\-\\s*1\\]\\s?\\+\\s?\\'\"\\>\\'\\s*?\\);/gi) && editor.match(/\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[\\d\\]\\s*?\\)\\.html\\(\\s*?\\'\\<img\\s?src\\s?=\\s?\"\\'\\s?\\+\\s?images\\[\\w+\\s*\\-\\s*1\\]\\s?\\+\\s?\\'\"\\>\\'\\s*?\\);/gi).length >= 3), 'Use the provided code three times. One for each slot.')",
        "assert(editor.match(/\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[0\\]\\s*?\\)/gi), 'You should have used <code>$&#40;&#39;.slot&#39;&#41;[0]</code> at least once.')",
        "assert(editor.match(/\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[1\\]\\s*?\\)/gi), 'You should have used <code>$&#40;&#39;.slot&#39;&#41;[1]</code> at least once.')",
        "assert(editor.match(/\\$\\s*?\\(\\s*?\\$\\s*?\\(\\s*?(?:'|\")\\s*?\\.slot\\s*?(?:'|\")\\s*?\\)\\[2\\]\\s*?\\)/gi), 'You should have used <code>$&#40;&#39;.slot&#39;&#41;[2]</code> at least once.')",
        "assert(editor.match(/slotOne/gi) && editor.match(/slotOne/gi).length >= 7, 'You should have used the <code>slotOne</code> value at least once.')",
        "assert(editor.match(/slotTwo/gi) && editor.match(/slotTwo/gi).length >= 8, 'You should have used the <code>slotTwo</code> value at least once.')",
        "assert(editor.match(/slotThree/gi) && editor.match(/slotThree/gi).length >= 7, 'You should have used the <code>slotThree</code> value at least once.')"
      ],
      "type": "waypoint",
      "challengeType": 0,
      "isBeta": true
    }
  ]
}